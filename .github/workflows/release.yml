name: Build Release

on:
  release:
    types: [created]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y libsodium-dev pkg-config build-essential meson ninja-build \
                                 libudev-dev libboost-all-dev curl \
                                 libprotobuf-dev protobuf-compiler \
                                 libgrpc-dev protobuf-compiler-grpc \
                                 libgrpc++-dev libyaml-cpp-dev \
                                 libfuse3-dev libc-ares-dev libcares2
    - name: Ensure libcares.a exists
      run: |
        LIBDIR=$(pkg-config --variable=libdir libcares)
        if [ -f "$LIBDIR/libcares_static.a" ] && [ ! -e "$LIBDIR/libcares.a" ]; then
          sudo ln -s libcares_static.a "$LIBDIR/libcares.a"
        fi
    - name: Init submodules
      run: git submodule update --init --recursive
    - name: Configure
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release \
                 -DBUILD_SHARED_LIBS=OFF -DWITH_STATIC_LIBS=ON \
                 -DZSTD_BUILD_STATIC=ON -DZSTD_BUILD_SHARED=OFF \
                 -DCMAKE_EXE_LINKER_FLAGS="-static -static-libstdc++ -static-libgcc"
    - name: Build
      run: cmake --build build --config Release
    - name: Verify static binaries
      run: |
        file build/metaserver build/node
        file build/metaserver | grep -q "statically linked"
        file build/node | grep -q "statically linked"
    - name: Upload binaries
      uses: softprops/action-gh-release@v1
      with:
        files: |
          build/metaserver
          build/node
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT }}

    - name: Configure Docker
      run: gcloud auth configure-docker us-docker.pkg.dev --quiet


    - name: Read release tag
      id: version
      run: echo "tag=${{ github.event.release.tag_name }}" >> "$GITHUB_OUTPUT"

    - name: Set image name
      run: echo "IMAGE=us-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/simplidfs/simplidfs-metaserver:${{ steps.version.outputs.tag }}" >> "$GITHUB_ENV"

    - name: Build image
      run: docker build --platform linux/amd64 --build-arg VERSION=${{ steps.version.outputs.tag }} -f deploy/metaserver.Dockerfile -t $IMAGE .

    - name: Push image
      run: docker push $IMAGE

    - name: Get image digest
      id: digest
      run: |
        DIGEST=$(gcloud artifacts docker images describe $IMAGE --format='value(image_summary.digest)')
        echo "digest=us-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/simplidfs/simplidfs-metaserver@${DIGEST}" >> "$GITHUB_OUTPUT"


    - name: Deploy Metaserver container
      run: |
        TOKEN=$(gcloud auth print-access-token)
        gcloud compute ssh ${{ secrets.GCE_INSTANCE }} \
          --zone ${{ secrets.GCE_ZONE }} \
          --project ${{ secrets.GCP_PROJECT }} \
          --command="echo $TOKEN | sudo docker login -u oauth2accesstoken --password-stdin https://us-docker.pkg.dev && sudo docker pull '${{ steps.digest.outputs.digest }}' && sudo docker rm -f metaserver || true && sudo systemctl daemon-reload && sudo systemctl restart simplidfs-metaserver.service || sudo systemctl enable --now simplidfs-metaserver.service"


