name: CMake

on:
  push:          { branches: [ master, development ] }
  pull_request:  { branches: [ master, development ] }

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-24.04  # noble snapshot

    steps:
      - uses: actions/checkout@v4

      # ---- system deps (libsodium + build tools) --------------------------
      - name: Install base packages
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libsodium-dev pkg-config \
                                   build-essential meson ninja-build \
                                   libudev-dev libboost-all-dev curl \
                                   libprotobuf-dev protobuf-compiler \
                                   libgrpc-dev protobuf-compiler-grpc \
                                   libgrpc++-dev libyaml-cpp-dev \
                                   libc-ares-dev libcares2

      - name: Ensure libcares.a exists
        run: |
          LIBDIR=$(pkg-config --variable=libdir libcares)
          if [ -f "$LIBDIR/libcares_static.a" ] && [ ! -e "$LIBDIR/libcares.a" ]; then
            sudo ln -s libcares_static.a "$LIBDIR/libcares.a"
          fi

      # ---- build libfuse 3.16.2 ------------------------------------------
      - name: Build & install libfuseÂ 3.16.2
        run: |
          curl -L -o fuse-3.16.2.tar.gz \
               https://github.com/libfuse/libfuse/releases/download/fuse-3.16.2/fuse-3.16.2.tar.gz
          tar xzf fuse-3.16.2.tar.gz
          cd fuse-3.16.2
          meson setup build --prefix=/usr
          ninja -C build
          sudo ninja -C build install
          sudo ldconfig

      # ---- project build/test --------------------------------------------
      - name: Init submodules
        run: git submodule update --init --recursive

      - name: Configure
        run: cmake -B build -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_POSIX_TEST_SUITE=ON -DBUILD_SHARED_LIBS=OFF -DWITH_STATIC_LIBS=ON
 
      - name: Build
        run: cmake --build build --config $BUILD_TYPE

      - name: Install SBOM tools
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          sudo curl -L https://github.com/CycloneDX/cyclonedx-gomod/releases/latest/download/cyclonedx-gomod-linux-amd64 -o /usr/local/bin/cyclonedx-gomod
          sudo chmod +x /usr/local/bin/cyclonedx-gomod
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sudo sh -s -- -b /usr/local/bin
          sudo curl -L https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64 -o /usr/local/bin/cosign
          sudo chmod +x /usr/local/bin/cosign

      - name: Generate CycloneDX SBOM
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          cyclonedx-gomod mod -licenses -json -output sbom-cyclonedx.json || touch sbom-cyclonedx.json

      - name: Generate Syft SBOM
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: syft dir:. -o spdx-json=sbom-syft.json

      - name: Sign SBOMs
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          cosign sign-blob --yes --output-signature sbom-cyclonedx.json.sig --output-certificate sbom-cyclonedx.json.pem sbom-cyclonedx.json
          cosign sign-blob --yes --output-signature sbom-syft.json.sig --output-certificate sbom-syft.json.pem sbom-syft.json

      - name: Upload SBOM artifacts
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: |
            sbom-cyclonedx.json
            sbom-cyclonedx.json.sig
            sbom-cyclonedx.json.pem
            sbom-syft.json
            sbom-syft.json.sig
            sbom-syft.json.pem

      - name: Test
        working-directory: build
        run: ctest -C $BUILD_TYPE --output-on-failure -VV -E FuseTestEnv --timeout 1200

      - name: FUSE Stress Tests
        run: sudo ./run_fuse_stress_tests.sh
