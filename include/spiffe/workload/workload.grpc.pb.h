// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: spiffe/workload/workload.proto
#ifndef GRPC_spiffe_2fworkload_2fworkload_2eproto__INCLUDED
#define GRPC_spiffe_2fworkload_2fworkload_2eproto__INCLUDED

#include "spiffe/workload/workload.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

class SpiffeWorkloadAPI final {
 public:
  static constexpr char const* service_full_name() {
    return "SpiffeWorkloadAPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Fetch X.509-SVIDs for all SPIFFE identities the workload is entitled to,
    // as well as related information like trust bundles and CRLs. As this
    // information changes, subsequent messages will be streamed from the
    // server.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::X509SVIDResponse>> FetchX509SVID(::grpc::ClientContext* context, const ::X509SVIDRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::X509SVIDResponse>>(FetchX509SVIDRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::X509SVIDResponse>> AsyncFetchX509SVID(::grpc::ClientContext* context, const ::X509SVIDRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::X509SVIDResponse>>(AsyncFetchX509SVIDRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::X509SVIDResponse>> PrepareAsyncFetchX509SVID(::grpc::ClientContext* context, const ::X509SVIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::X509SVIDResponse>>(PrepareAsyncFetchX509SVIDRaw(context, request, cq));
    }
    // Fetch trust bundles and CRLs. Useful for clients that only need to
    // validate SVIDs without obtaining an SVID for themself. As this
    // information changes, subsequent messages will be streamed from the
    // server.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::X509BundlesResponse>> FetchX509Bundles(::grpc::ClientContext* context, const ::X509BundlesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::X509BundlesResponse>>(FetchX509BundlesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::X509BundlesResponse>> AsyncFetchX509Bundles(::grpc::ClientContext* context, const ::X509BundlesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::X509BundlesResponse>>(AsyncFetchX509BundlesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::X509BundlesResponse>> PrepareAsyncFetchX509Bundles(::grpc::ClientContext* context, const ::X509BundlesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::X509BundlesResponse>>(PrepareAsyncFetchX509BundlesRaw(context, request, cq));
    }
    // ///////////////////////////////////////////////////////////////////////
    // JWT-SVID Profile
    // ///////////////////////////////////////////////////////////////////////
    //
    // Fetch JWT-SVIDs for all SPIFFE identities the workload is entitled to,
    // for the requested audience. If an optional SPIFFE ID is requested, only
    // the JWT-SVID for that SPIFFE ID is returned.
    virtual ::grpc::Status FetchJWTSVID(::grpc::ClientContext* context, const ::JWTSVIDRequest& request, ::JWTSVIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::JWTSVIDResponse>> AsyncFetchJWTSVID(::grpc::ClientContext* context, const ::JWTSVIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::JWTSVIDResponse>>(AsyncFetchJWTSVIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::JWTSVIDResponse>> PrepareAsyncFetchJWTSVID(::grpc::ClientContext* context, const ::JWTSVIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::JWTSVIDResponse>>(PrepareAsyncFetchJWTSVIDRaw(context, request, cq));
    }
    // Fetches the JWT bundles, formatted as JWKS documents, keyed by the
    // SPIFFE ID of the trust domain. As this information changes, subsequent
    // messages will be streamed from the server.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::JWTBundlesResponse>> FetchJWTBundles(::grpc::ClientContext* context, const ::JWTBundlesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::JWTBundlesResponse>>(FetchJWTBundlesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::JWTBundlesResponse>> AsyncFetchJWTBundles(::grpc::ClientContext* context, const ::JWTBundlesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::JWTBundlesResponse>>(AsyncFetchJWTBundlesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::JWTBundlesResponse>> PrepareAsyncFetchJWTBundles(::grpc::ClientContext* context, const ::JWTBundlesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::JWTBundlesResponse>>(PrepareAsyncFetchJWTBundlesRaw(context, request, cq));
    }
    // Validates a JWT-SVID against the requested audience. Returns the SPIFFE
    // ID of the JWT-SVID and JWT claims.
    virtual ::grpc::Status ValidateJWTSVID(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest& request, ::ValidateJWTSVIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ValidateJWTSVIDResponse>> AsyncValidateJWTSVID(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ValidateJWTSVIDResponse>>(AsyncValidateJWTSVIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ValidateJWTSVIDResponse>> PrepareAsyncValidateJWTSVID(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ValidateJWTSVIDResponse>>(PrepareAsyncValidateJWTSVIDRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Fetch X.509-SVIDs for all SPIFFE identities the workload is entitled to,
      // as well as related information like trust bundles and CRLs. As this
      // information changes, subsequent messages will be streamed from the
      // server.
      virtual void FetchX509SVID(::grpc::ClientContext* context, const ::X509SVIDRequest* request, ::grpc::ClientReadReactor< ::X509SVIDResponse>* reactor) = 0;
      // Fetch trust bundles and CRLs. Useful for clients that only need to
      // validate SVIDs without obtaining an SVID for themself. As this
      // information changes, subsequent messages will be streamed from the
      // server.
      virtual void FetchX509Bundles(::grpc::ClientContext* context, const ::X509BundlesRequest* request, ::grpc::ClientReadReactor< ::X509BundlesResponse>* reactor) = 0;
      // ///////////////////////////////////////////////////////////////////////
      // JWT-SVID Profile
      // ///////////////////////////////////////////////////////////////////////
      //
      // Fetch JWT-SVIDs for all SPIFFE identities the workload is entitled to,
      // for the requested audience. If an optional SPIFFE ID is requested, only
      // the JWT-SVID for that SPIFFE ID is returned.
      virtual void FetchJWTSVID(::grpc::ClientContext* context, const ::JWTSVIDRequest* request, ::JWTSVIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FetchJWTSVID(::grpc::ClientContext* context, const ::JWTSVIDRequest* request, ::JWTSVIDResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Fetches the JWT bundles, formatted as JWKS documents, keyed by the
      // SPIFFE ID of the trust domain. As this information changes, subsequent
      // messages will be streamed from the server.
      virtual void FetchJWTBundles(::grpc::ClientContext* context, const ::JWTBundlesRequest* request, ::grpc::ClientReadReactor< ::JWTBundlesResponse>* reactor) = 0;
      // Validates a JWT-SVID against the requested audience. Returns the SPIFFE
      // ID of the JWT-SVID and JWT claims.
      virtual void ValidateJWTSVID(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest* request, ::ValidateJWTSVIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValidateJWTSVID(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest* request, ::ValidateJWTSVIDResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::X509SVIDResponse>* FetchX509SVIDRaw(::grpc::ClientContext* context, const ::X509SVIDRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::X509SVIDResponse>* AsyncFetchX509SVIDRaw(::grpc::ClientContext* context, const ::X509SVIDRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::X509SVIDResponse>* PrepareAsyncFetchX509SVIDRaw(::grpc::ClientContext* context, const ::X509SVIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::X509BundlesResponse>* FetchX509BundlesRaw(::grpc::ClientContext* context, const ::X509BundlesRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::X509BundlesResponse>* AsyncFetchX509BundlesRaw(::grpc::ClientContext* context, const ::X509BundlesRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::X509BundlesResponse>* PrepareAsyncFetchX509BundlesRaw(::grpc::ClientContext* context, const ::X509BundlesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::JWTSVIDResponse>* AsyncFetchJWTSVIDRaw(::grpc::ClientContext* context, const ::JWTSVIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::JWTSVIDResponse>* PrepareAsyncFetchJWTSVIDRaw(::grpc::ClientContext* context, const ::JWTSVIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::JWTBundlesResponse>* FetchJWTBundlesRaw(::grpc::ClientContext* context, const ::JWTBundlesRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::JWTBundlesResponse>* AsyncFetchJWTBundlesRaw(::grpc::ClientContext* context, const ::JWTBundlesRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::JWTBundlesResponse>* PrepareAsyncFetchJWTBundlesRaw(::grpc::ClientContext* context, const ::JWTBundlesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ValidateJWTSVIDResponse>* AsyncValidateJWTSVIDRaw(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ValidateJWTSVIDResponse>* PrepareAsyncValidateJWTSVIDRaw(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::X509SVIDResponse>> FetchX509SVID(::grpc::ClientContext* context, const ::X509SVIDRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::X509SVIDResponse>>(FetchX509SVIDRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::X509SVIDResponse>> AsyncFetchX509SVID(::grpc::ClientContext* context, const ::X509SVIDRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::X509SVIDResponse>>(AsyncFetchX509SVIDRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::X509SVIDResponse>> PrepareAsyncFetchX509SVID(::grpc::ClientContext* context, const ::X509SVIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::X509SVIDResponse>>(PrepareAsyncFetchX509SVIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::X509BundlesResponse>> FetchX509Bundles(::grpc::ClientContext* context, const ::X509BundlesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::X509BundlesResponse>>(FetchX509BundlesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::X509BundlesResponse>> AsyncFetchX509Bundles(::grpc::ClientContext* context, const ::X509BundlesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::X509BundlesResponse>>(AsyncFetchX509BundlesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::X509BundlesResponse>> PrepareAsyncFetchX509Bundles(::grpc::ClientContext* context, const ::X509BundlesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::X509BundlesResponse>>(PrepareAsyncFetchX509BundlesRaw(context, request, cq));
    }
    ::grpc::Status FetchJWTSVID(::grpc::ClientContext* context, const ::JWTSVIDRequest& request, ::JWTSVIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::JWTSVIDResponse>> AsyncFetchJWTSVID(::grpc::ClientContext* context, const ::JWTSVIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::JWTSVIDResponse>>(AsyncFetchJWTSVIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::JWTSVIDResponse>> PrepareAsyncFetchJWTSVID(::grpc::ClientContext* context, const ::JWTSVIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::JWTSVIDResponse>>(PrepareAsyncFetchJWTSVIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::JWTBundlesResponse>> FetchJWTBundles(::grpc::ClientContext* context, const ::JWTBundlesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::JWTBundlesResponse>>(FetchJWTBundlesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::JWTBundlesResponse>> AsyncFetchJWTBundles(::grpc::ClientContext* context, const ::JWTBundlesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::JWTBundlesResponse>>(AsyncFetchJWTBundlesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::JWTBundlesResponse>> PrepareAsyncFetchJWTBundles(::grpc::ClientContext* context, const ::JWTBundlesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::JWTBundlesResponse>>(PrepareAsyncFetchJWTBundlesRaw(context, request, cq));
    }
    ::grpc::Status ValidateJWTSVID(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest& request, ::ValidateJWTSVIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ValidateJWTSVIDResponse>> AsyncValidateJWTSVID(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ValidateJWTSVIDResponse>>(AsyncValidateJWTSVIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ValidateJWTSVIDResponse>> PrepareAsyncValidateJWTSVID(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ValidateJWTSVIDResponse>>(PrepareAsyncValidateJWTSVIDRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void FetchX509SVID(::grpc::ClientContext* context, const ::X509SVIDRequest* request, ::grpc::ClientReadReactor< ::X509SVIDResponse>* reactor) override;
      void FetchX509Bundles(::grpc::ClientContext* context, const ::X509BundlesRequest* request, ::grpc::ClientReadReactor< ::X509BundlesResponse>* reactor) override;
      void FetchJWTSVID(::grpc::ClientContext* context, const ::JWTSVIDRequest* request, ::JWTSVIDResponse* response, std::function<void(::grpc::Status)>) override;
      void FetchJWTSVID(::grpc::ClientContext* context, const ::JWTSVIDRequest* request, ::JWTSVIDResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FetchJWTBundles(::grpc::ClientContext* context, const ::JWTBundlesRequest* request, ::grpc::ClientReadReactor< ::JWTBundlesResponse>* reactor) override;
      void ValidateJWTSVID(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest* request, ::ValidateJWTSVIDResponse* response, std::function<void(::grpc::Status)>) override;
      void ValidateJWTSVID(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest* request, ::ValidateJWTSVIDResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::X509SVIDResponse>* FetchX509SVIDRaw(::grpc::ClientContext* context, const ::X509SVIDRequest& request) override;
    ::grpc::ClientAsyncReader< ::X509SVIDResponse>* AsyncFetchX509SVIDRaw(::grpc::ClientContext* context, const ::X509SVIDRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::X509SVIDResponse>* PrepareAsyncFetchX509SVIDRaw(::grpc::ClientContext* context, const ::X509SVIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::X509BundlesResponse>* FetchX509BundlesRaw(::grpc::ClientContext* context, const ::X509BundlesRequest& request) override;
    ::grpc::ClientAsyncReader< ::X509BundlesResponse>* AsyncFetchX509BundlesRaw(::grpc::ClientContext* context, const ::X509BundlesRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::X509BundlesResponse>* PrepareAsyncFetchX509BundlesRaw(::grpc::ClientContext* context, const ::X509BundlesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::JWTSVIDResponse>* AsyncFetchJWTSVIDRaw(::grpc::ClientContext* context, const ::JWTSVIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::JWTSVIDResponse>* PrepareAsyncFetchJWTSVIDRaw(::grpc::ClientContext* context, const ::JWTSVIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::JWTBundlesResponse>* FetchJWTBundlesRaw(::grpc::ClientContext* context, const ::JWTBundlesRequest& request) override;
    ::grpc::ClientAsyncReader< ::JWTBundlesResponse>* AsyncFetchJWTBundlesRaw(::grpc::ClientContext* context, const ::JWTBundlesRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::JWTBundlesResponse>* PrepareAsyncFetchJWTBundlesRaw(::grpc::ClientContext* context, const ::JWTBundlesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ValidateJWTSVIDResponse>* AsyncValidateJWTSVIDRaw(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ValidateJWTSVIDResponse>* PrepareAsyncValidateJWTSVIDRaw(::grpc::ClientContext* context, const ::ValidateJWTSVIDRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_FetchX509SVID_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchX509Bundles_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchJWTSVID_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchJWTBundles_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidateJWTSVID_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Fetch X.509-SVIDs for all SPIFFE identities the workload is entitled to,
    // as well as related information like trust bundles and CRLs. As this
    // information changes, subsequent messages will be streamed from the
    // server.
    virtual ::grpc::Status FetchX509SVID(::grpc::ServerContext* context, const ::X509SVIDRequest* request, ::grpc::ServerWriter< ::X509SVIDResponse>* writer);
    // Fetch trust bundles and CRLs. Useful for clients that only need to
    // validate SVIDs without obtaining an SVID for themself. As this
    // information changes, subsequent messages will be streamed from the
    // server.
    virtual ::grpc::Status FetchX509Bundles(::grpc::ServerContext* context, const ::X509BundlesRequest* request, ::grpc::ServerWriter< ::X509BundlesResponse>* writer);
    // ///////////////////////////////////////////////////////////////////////
    // JWT-SVID Profile
    // ///////////////////////////////////////////////////////////////////////
    //
    // Fetch JWT-SVIDs for all SPIFFE identities the workload is entitled to,
    // for the requested audience. If an optional SPIFFE ID is requested, only
    // the JWT-SVID for that SPIFFE ID is returned.
    virtual ::grpc::Status FetchJWTSVID(::grpc::ServerContext* context, const ::JWTSVIDRequest* request, ::JWTSVIDResponse* response);
    // Fetches the JWT bundles, formatted as JWKS documents, keyed by the
    // SPIFFE ID of the trust domain. As this information changes, subsequent
    // messages will be streamed from the server.
    virtual ::grpc::Status FetchJWTBundles(::grpc::ServerContext* context, const ::JWTBundlesRequest* request, ::grpc::ServerWriter< ::JWTBundlesResponse>* writer);
    // Validates a JWT-SVID against the requested audience. Returns the SPIFFE
    // ID of the JWT-SVID and JWT claims.
    virtual ::grpc::Status ValidateJWTSVID(::grpc::ServerContext* context, const ::ValidateJWTSVIDRequest* request, ::ValidateJWTSVIDResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchX509SVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchX509SVID() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_FetchX509SVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchX509SVID(::grpc::ServerContext* /*context*/, const ::X509SVIDRequest* /*request*/, ::grpc::ServerWriter< ::X509SVIDResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchX509SVID(::grpc::ServerContext* context, ::X509SVIDRequest* request, ::grpc::ServerAsyncWriter< ::X509SVIDResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchX509Bundles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchX509Bundles() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FetchX509Bundles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchX509Bundles(::grpc::ServerContext* /*context*/, const ::X509BundlesRequest* /*request*/, ::grpc::ServerWriter< ::X509BundlesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchX509Bundles(::grpc::ServerContext* context, ::X509BundlesRequest* request, ::grpc::ServerAsyncWriter< ::X509BundlesResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchJWTSVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchJWTSVID() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_FetchJWTSVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchJWTSVID(::grpc::ServerContext* /*context*/, const ::JWTSVIDRequest* /*request*/, ::JWTSVIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchJWTSVID(::grpc::ServerContext* context, ::JWTSVIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::JWTSVIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchJWTBundles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchJWTBundles() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_FetchJWTBundles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchJWTBundles(::grpc::ServerContext* /*context*/, const ::JWTBundlesRequest* /*request*/, ::grpc::ServerWriter< ::JWTBundlesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchJWTBundles(::grpc::ServerContext* context, ::JWTBundlesRequest* request, ::grpc::ServerAsyncWriter< ::JWTBundlesResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidateJWTSVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidateJWTSVID() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ValidateJWTSVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateJWTSVID(::grpc::ServerContext* /*context*/, const ::ValidateJWTSVIDRequest* /*request*/, ::ValidateJWTSVIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateJWTSVID(::grpc::ServerContext* context, ::ValidateJWTSVIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::ValidateJWTSVIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_FetchX509SVID<WithAsyncMethod_FetchX509Bundles<WithAsyncMethod_FetchJWTSVID<WithAsyncMethod_FetchJWTBundles<WithAsyncMethod_ValidateJWTSVID<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_FetchX509SVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FetchX509SVID() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::X509SVIDRequest, ::X509SVIDResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::X509SVIDRequest* request) { return this->FetchX509SVID(context, request); }));
    }
    ~WithCallbackMethod_FetchX509SVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchX509SVID(::grpc::ServerContext* /*context*/, const ::X509SVIDRequest* /*request*/, ::grpc::ServerWriter< ::X509SVIDResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::X509SVIDResponse>* FetchX509SVID(
      ::grpc::CallbackServerContext* /*context*/, const ::X509SVIDRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FetchX509Bundles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FetchX509Bundles() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::X509BundlesRequest, ::X509BundlesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::X509BundlesRequest* request) { return this->FetchX509Bundles(context, request); }));
    }
    ~WithCallbackMethod_FetchX509Bundles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchX509Bundles(::grpc::ServerContext* /*context*/, const ::X509BundlesRequest* /*request*/, ::grpc::ServerWriter< ::X509BundlesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::X509BundlesResponse>* FetchX509Bundles(
      ::grpc::CallbackServerContext* /*context*/, const ::X509BundlesRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FetchJWTSVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FetchJWTSVID() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::JWTSVIDRequest, ::JWTSVIDResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::JWTSVIDRequest* request, ::JWTSVIDResponse* response) { return this->FetchJWTSVID(context, request, response); }));}
    void SetMessageAllocatorFor_FetchJWTSVID(
        ::grpc::MessageAllocator< ::JWTSVIDRequest, ::JWTSVIDResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::JWTSVIDRequest, ::JWTSVIDResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FetchJWTSVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchJWTSVID(::grpc::ServerContext* /*context*/, const ::JWTSVIDRequest* /*request*/, ::JWTSVIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchJWTSVID(
      ::grpc::CallbackServerContext* /*context*/, const ::JWTSVIDRequest* /*request*/, ::JWTSVIDResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FetchJWTBundles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FetchJWTBundles() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::JWTBundlesRequest, ::JWTBundlesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::JWTBundlesRequest* request) { return this->FetchJWTBundles(context, request); }));
    }
    ~WithCallbackMethod_FetchJWTBundles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchJWTBundles(::grpc::ServerContext* /*context*/, const ::JWTBundlesRequest* /*request*/, ::grpc::ServerWriter< ::JWTBundlesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::JWTBundlesResponse>* FetchJWTBundles(
      ::grpc::CallbackServerContext* /*context*/, const ::JWTBundlesRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ValidateJWTSVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ValidateJWTSVID() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::ValidateJWTSVIDRequest, ::ValidateJWTSVIDResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ValidateJWTSVIDRequest* request, ::ValidateJWTSVIDResponse* response) { return this->ValidateJWTSVID(context, request, response); }));}
    void SetMessageAllocatorFor_ValidateJWTSVID(
        ::grpc::MessageAllocator< ::ValidateJWTSVIDRequest, ::ValidateJWTSVIDResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ValidateJWTSVIDRequest, ::ValidateJWTSVIDResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ValidateJWTSVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateJWTSVID(::grpc::ServerContext* /*context*/, const ::ValidateJWTSVIDRequest* /*request*/, ::ValidateJWTSVIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValidateJWTSVID(
      ::grpc::CallbackServerContext* /*context*/, const ::ValidateJWTSVIDRequest* /*request*/, ::ValidateJWTSVIDResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_FetchX509SVID<WithCallbackMethod_FetchX509Bundles<WithCallbackMethod_FetchJWTSVID<WithCallbackMethod_FetchJWTBundles<WithCallbackMethod_ValidateJWTSVID<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_FetchX509SVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchX509SVID() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_FetchX509SVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchX509SVID(::grpc::ServerContext* /*context*/, const ::X509SVIDRequest* /*request*/, ::grpc::ServerWriter< ::X509SVIDResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchX509Bundles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchX509Bundles() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FetchX509Bundles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchX509Bundles(::grpc::ServerContext* /*context*/, const ::X509BundlesRequest* /*request*/, ::grpc::ServerWriter< ::X509BundlesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchJWTSVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchJWTSVID() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_FetchJWTSVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchJWTSVID(::grpc::ServerContext* /*context*/, const ::JWTSVIDRequest* /*request*/, ::JWTSVIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchJWTBundles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchJWTBundles() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_FetchJWTBundles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchJWTBundles(::grpc::ServerContext* /*context*/, const ::JWTBundlesRequest* /*request*/, ::grpc::ServerWriter< ::JWTBundlesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidateJWTSVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidateJWTSVID() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ValidateJWTSVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateJWTSVID(::grpc::ServerContext* /*context*/, const ::ValidateJWTSVIDRequest* /*request*/, ::ValidateJWTSVIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchX509SVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchX509SVID() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_FetchX509SVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchX509SVID(::grpc::ServerContext* /*context*/, const ::X509SVIDRequest* /*request*/, ::grpc::ServerWriter< ::X509SVIDResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchX509SVID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchX509Bundles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchX509Bundles() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FetchX509Bundles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchX509Bundles(::grpc::ServerContext* /*context*/, const ::X509BundlesRequest* /*request*/, ::grpc::ServerWriter< ::X509BundlesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchX509Bundles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchJWTSVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchJWTSVID() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_FetchJWTSVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchJWTSVID(::grpc::ServerContext* /*context*/, const ::JWTSVIDRequest* /*request*/, ::JWTSVIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchJWTSVID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchJWTBundles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchJWTBundles() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_FetchJWTBundles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchJWTBundles(::grpc::ServerContext* /*context*/, const ::JWTBundlesRequest* /*request*/, ::grpc::ServerWriter< ::JWTBundlesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchJWTBundles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidateJWTSVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidateJWTSVID() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ValidateJWTSVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateJWTSVID(::grpc::ServerContext* /*context*/, const ::ValidateJWTSVIDRequest* /*request*/, ::ValidateJWTSVIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateJWTSVID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FetchX509SVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FetchX509SVID() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->FetchX509SVID(context, request); }));
    }
    ~WithRawCallbackMethod_FetchX509SVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchX509SVID(::grpc::ServerContext* /*context*/, const ::X509SVIDRequest* /*request*/, ::grpc::ServerWriter< ::X509SVIDResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* FetchX509SVID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FetchX509Bundles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FetchX509Bundles() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->FetchX509Bundles(context, request); }));
    }
    ~WithRawCallbackMethod_FetchX509Bundles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchX509Bundles(::grpc::ServerContext* /*context*/, const ::X509BundlesRequest* /*request*/, ::grpc::ServerWriter< ::X509BundlesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* FetchX509Bundles(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FetchJWTSVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FetchJWTSVID() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FetchJWTSVID(context, request, response); }));
    }
    ~WithRawCallbackMethod_FetchJWTSVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchJWTSVID(::grpc::ServerContext* /*context*/, const ::JWTSVIDRequest* /*request*/, ::JWTSVIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchJWTSVID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FetchJWTBundles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FetchJWTBundles() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->FetchJWTBundles(context, request); }));
    }
    ~WithRawCallbackMethod_FetchJWTBundles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchJWTBundles(::grpc::ServerContext* /*context*/, const ::JWTBundlesRequest* /*request*/, ::grpc::ServerWriter< ::JWTBundlesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* FetchJWTBundles(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ValidateJWTSVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ValidateJWTSVID() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidateJWTSVID(context, request, response); }));
    }
    ~WithRawCallbackMethod_ValidateJWTSVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateJWTSVID(::grpc::ServerContext* /*context*/, const ::ValidateJWTSVIDRequest* /*request*/, ::ValidateJWTSVIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValidateJWTSVID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FetchJWTSVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FetchJWTSVID() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::JWTSVIDRequest, ::JWTSVIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::JWTSVIDRequest, ::JWTSVIDResponse>* streamer) {
                       return this->StreamedFetchJWTSVID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FetchJWTSVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchJWTSVID(::grpc::ServerContext* /*context*/, const ::JWTSVIDRequest* /*request*/, ::JWTSVIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFetchJWTSVID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::JWTSVIDRequest,::JWTSVIDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidateJWTSVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidateJWTSVID() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ValidateJWTSVIDRequest, ::ValidateJWTSVIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ValidateJWTSVIDRequest, ::ValidateJWTSVIDResponse>* streamer) {
                       return this->StreamedValidateJWTSVID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidateJWTSVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidateJWTSVID(::grpc::ServerContext* /*context*/, const ::ValidateJWTSVIDRequest* /*request*/, ::ValidateJWTSVIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidateJWTSVID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ValidateJWTSVIDRequest,::ValidateJWTSVIDResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_FetchJWTSVID<WithStreamedUnaryMethod_ValidateJWTSVID<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_FetchX509SVID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_FetchX509SVID() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::X509SVIDRequest, ::X509SVIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::X509SVIDRequest, ::X509SVIDResponse>* streamer) {
                       return this->StreamedFetchX509SVID(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_FetchX509SVID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchX509SVID(::grpc::ServerContext* /*context*/, const ::X509SVIDRequest* /*request*/, ::grpc::ServerWriter< ::X509SVIDResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFetchX509SVID(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::X509SVIDRequest,::X509SVIDResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_FetchX509Bundles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_FetchX509Bundles() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::X509BundlesRequest, ::X509BundlesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::X509BundlesRequest, ::X509BundlesResponse>* streamer) {
                       return this->StreamedFetchX509Bundles(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_FetchX509Bundles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchX509Bundles(::grpc::ServerContext* /*context*/, const ::X509BundlesRequest* /*request*/, ::grpc::ServerWriter< ::X509BundlesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFetchX509Bundles(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::X509BundlesRequest,::X509BundlesResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_FetchJWTBundles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_FetchJWTBundles() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::JWTBundlesRequest, ::JWTBundlesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::JWTBundlesRequest, ::JWTBundlesResponse>* streamer) {
                       return this->StreamedFetchJWTBundles(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_FetchJWTBundles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchJWTBundles(::grpc::ServerContext* /*context*/, const ::JWTBundlesRequest* /*request*/, ::grpc::ServerWriter< ::JWTBundlesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFetchJWTBundles(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::JWTBundlesRequest,::JWTBundlesResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_FetchX509SVID<WithSplitStreamingMethod_FetchX509Bundles<WithSplitStreamingMethod_FetchJWTBundles<Service > > > SplitStreamedService;
  typedef WithSplitStreamingMethod_FetchX509SVID<WithSplitStreamingMethod_FetchX509Bundles<WithStreamedUnaryMethod_FetchJWTSVID<WithSplitStreamingMethod_FetchJWTBundles<WithStreamedUnaryMethod_ValidateJWTSVID<Service > > > > > StreamedService;
};
// ///////////////////////////////////////////////////////////////////////
// X509-SVID Profile
// ///////////////////////////////////////////////////////////////////////


#endif  // GRPC_spiffe_2fworkload_2fworkload_2eproto__INCLUDED
