// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/filesystem.proto
#ifndef GRPC_proto_2ffilesystem_2eproto__INCLUDED
#define GRPC_proto_2ffilesystem_2eproto__INCLUDED

#include "proto/filesystem.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace simplidfs {

class FileService final {
 public:
  static constexpr char const* service_full_name() {
    return "simplidfs.FileService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateFile(::grpc::ClientContext* context, const ::simplidfs::CreateFileRequest& request, ::simplidfs::SimpleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::simplidfs::SimpleResponse>> AsyncCreateFile(::grpc::ClientContext* context, const ::simplidfs::CreateFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::simplidfs::SimpleResponse>>(AsyncCreateFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::simplidfs::SimpleResponse>> PrepareAsyncCreateFile(::grpc::ClientContext* context, const ::simplidfs::CreateFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::simplidfs::SimpleResponse>>(PrepareAsyncCreateFileRaw(context, request, cq));
    }
    virtual ::grpc::Status WriteFile(::grpc::ClientContext* context, const ::simplidfs::WriteFileRequest& request, ::simplidfs::SimpleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::simplidfs::SimpleResponse>> AsyncWriteFile(::grpc::ClientContext* context, const ::simplidfs::WriteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::simplidfs::SimpleResponse>>(AsyncWriteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::simplidfs::SimpleResponse>> PrepareAsyncWriteFile(::grpc::ClientContext* context, const ::simplidfs::WriteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::simplidfs::SimpleResponse>>(PrepareAsyncWriteFileRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadFile(::grpc::ClientContext* context, const ::simplidfs::ReadFileRequest& request, ::simplidfs::ReadFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::simplidfs::ReadFileResponse>> AsyncReadFile(::grpc::ClientContext* context, const ::simplidfs::ReadFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::simplidfs::ReadFileResponse>>(AsyncReadFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::simplidfs::ReadFileResponse>> PrepareAsyncReadFile(::grpc::ClientContext* context, const ::simplidfs::ReadFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::simplidfs::ReadFileResponse>>(PrepareAsyncReadFileRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteFile(::grpc::ClientContext* context, const ::simplidfs::DeleteFileRequest& request, ::simplidfs::SimpleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::simplidfs::SimpleResponse>> AsyncDeleteFile(::grpc::ClientContext* context, const ::simplidfs::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::simplidfs::SimpleResponse>>(AsyncDeleteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::simplidfs::SimpleResponse>> PrepareAsyncDeleteFile(::grpc::ClientContext* context, const ::simplidfs::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::simplidfs::SimpleResponse>>(PrepareAsyncDeleteFileRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateFile(::grpc::ClientContext* context, const ::simplidfs::CreateFileRequest* request, ::simplidfs::SimpleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateFile(::grpc::ClientContext* context, const ::simplidfs::CreateFileRequest* request, ::simplidfs::SimpleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void WriteFile(::grpc::ClientContext* context, const ::simplidfs::WriteFileRequest* request, ::simplidfs::SimpleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WriteFile(::grpc::ClientContext* context, const ::simplidfs::WriteFileRequest* request, ::simplidfs::SimpleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReadFile(::grpc::ClientContext* context, const ::simplidfs::ReadFileRequest* request, ::simplidfs::ReadFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadFile(::grpc::ClientContext* context, const ::simplidfs::ReadFileRequest* request, ::simplidfs::ReadFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteFile(::grpc::ClientContext* context, const ::simplidfs::DeleteFileRequest* request, ::simplidfs::SimpleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteFile(::grpc::ClientContext* context, const ::simplidfs::DeleteFileRequest* request, ::simplidfs::SimpleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::simplidfs::SimpleResponse>* AsyncCreateFileRaw(::grpc::ClientContext* context, const ::simplidfs::CreateFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::simplidfs::SimpleResponse>* PrepareAsyncCreateFileRaw(::grpc::ClientContext* context, const ::simplidfs::CreateFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::simplidfs::SimpleResponse>* AsyncWriteFileRaw(::grpc::ClientContext* context, const ::simplidfs::WriteFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::simplidfs::SimpleResponse>* PrepareAsyncWriteFileRaw(::grpc::ClientContext* context, const ::simplidfs::WriteFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::simplidfs::ReadFileResponse>* AsyncReadFileRaw(::grpc::ClientContext* context, const ::simplidfs::ReadFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::simplidfs::ReadFileResponse>* PrepareAsyncReadFileRaw(::grpc::ClientContext* context, const ::simplidfs::ReadFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::simplidfs::SimpleResponse>* AsyncDeleteFileRaw(::grpc::ClientContext* context, const ::simplidfs::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::simplidfs::SimpleResponse>* PrepareAsyncDeleteFileRaw(::grpc::ClientContext* context, const ::simplidfs::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateFile(::grpc::ClientContext* context, const ::simplidfs::CreateFileRequest& request, ::simplidfs::SimpleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::simplidfs::SimpleResponse>> AsyncCreateFile(::grpc::ClientContext* context, const ::simplidfs::CreateFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::simplidfs::SimpleResponse>>(AsyncCreateFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::simplidfs::SimpleResponse>> PrepareAsyncCreateFile(::grpc::ClientContext* context, const ::simplidfs::CreateFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::simplidfs::SimpleResponse>>(PrepareAsyncCreateFileRaw(context, request, cq));
    }
    ::grpc::Status WriteFile(::grpc::ClientContext* context, const ::simplidfs::WriteFileRequest& request, ::simplidfs::SimpleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::simplidfs::SimpleResponse>> AsyncWriteFile(::grpc::ClientContext* context, const ::simplidfs::WriteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::simplidfs::SimpleResponse>>(AsyncWriteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::simplidfs::SimpleResponse>> PrepareAsyncWriteFile(::grpc::ClientContext* context, const ::simplidfs::WriteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::simplidfs::SimpleResponse>>(PrepareAsyncWriteFileRaw(context, request, cq));
    }
    ::grpc::Status ReadFile(::grpc::ClientContext* context, const ::simplidfs::ReadFileRequest& request, ::simplidfs::ReadFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::simplidfs::ReadFileResponse>> AsyncReadFile(::grpc::ClientContext* context, const ::simplidfs::ReadFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::simplidfs::ReadFileResponse>>(AsyncReadFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::simplidfs::ReadFileResponse>> PrepareAsyncReadFile(::grpc::ClientContext* context, const ::simplidfs::ReadFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::simplidfs::ReadFileResponse>>(PrepareAsyncReadFileRaw(context, request, cq));
    }
    ::grpc::Status DeleteFile(::grpc::ClientContext* context, const ::simplidfs::DeleteFileRequest& request, ::simplidfs::SimpleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::simplidfs::SimpleResponse>> AsyncDeleteFile(::grpc::ClientContext* context, const ::simplidfs::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::simplidfs::SimpleResponse>>(AsyncDeleteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::simplidfs::SimpleResponse>> PrepareAsyncDeleteFile(::grpc::ClientContext* context, const ::simplidfs::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::simplidfs::SimpleResponse>>(PrepareAsyncDeleteFileRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateFile(::grpc::ClientContext* context, const ::simplidfs::CreateFileRequest* request, ::simplidfs::SimpleResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateFile(::grpc::ClientContext* context, const ::simplidfs::CreateFileRequest* request, ::simplidfs::SimpleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WriteFile(::grpc::ClientContext* context, const ::simplidfs::WriteFileRequest* request, ::simplidfs::SimpleResponse* response, std::function<void(::grpc::Status)>) override;
      void WriteFile(::grpc::ClientContext* context, const ::simplidfs::WriteFileRequest* request, ::simplidfs::SimpleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadFile(::grpc::ClientContext* context, const ::simplidfs::ReadFileRequest* request, ::simplidfs::ReadFileResponse* response, std::function<void(::grpc::Status)>) override;
      void ReadFile(::grpc::ClientContext* context, const ::simplidfs::ReadFileRequest* request, ::simplidfs::ReadFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteFile(::grpc::ClientContext* context, const ::simplidfs::DeleteFileRequest* request, ::simplidfs::SimpleResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteFile(::grpc::ClientContext* context, const ::simplidfs::DeleteFileRequest* request, ::simplidfs::SimpleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::simplidfs::SimpleResponse>* AsyncCreateFileRaw(::grpc::ClientContext* context, const ::simplidfs::CreateFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::simplidfs::SimpleResponse>* PrepareAsyncCreateFileRaw(::grpc::ClientContext* context, const ::simplidfs::CreateFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::simplidfs::SimpleResponse>* AsyncWriteFileRaw(::grpc::ClientContext* context, const ::simplidfs::WriteFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::simplidfs::SimpleResponse>* PrepareAsyncWriteFileRaw(::grpc::ClientContext* context, const ::simplidfs::WriteFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::simplidfs::ReadFileResponse>* AsyncReadFileRaw(::grpc::ClientContext* context, const ::simplidfs::ReadFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::simplidfs::ReadFileResponse>* PrepareAsyncReadFileRaw(::grpc::ClientContext* context, const ::simplidfs::ReadFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::simplidfs::SimpleResponse>* AsyncDeleteFileRaw(::grpc::ClientContext* context, const ::simplidfs::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::simplidfs::SimpleResponse>* PrepareAsyncDeleteFileRaw(::grpc::ClientContext* context, const ::simplidfs::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateFile_;
    const ::grpc::internal::RpcMethod rpcmethod_WriteFile_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadFile_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteFile_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateFile(::grpc::ServerContext* context, const ::simplidfs::CreateFileRequest* request, ::simplidfs::SimpleResponse* response);
    virtual ::grpc::Status WriteFile(::grpc::ServerContext* context, const ::simplidfs::WriteFileRequest* request, ::simplidfs::SimpleResponse* response);
    virtual ::grpc::Status ReadFile(::grpc::ServerContext* context, const ::simplidfs::ReadFileRequest* request, ::simplidfs::ReadFileResponse* response);
    virtual ::grpc::Status DeleteFile(::grpc::ServerContext* context, const ::simplidfs::DeleteFileRequest* request, ::simplidfs::SimpleResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateFile() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::simplidfs::CreateFileRequest* /*request*/, ::simplidfs::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateFile(::grpc::ServerContext* context, ::simplidfs::CreateFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::simplidfs::SimpleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WriteFile() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_WriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteFile(::grpc::ServerContext* /*context*/, const ::simplidfs::WriteFileRequest* /*request*/, ::simplidfs::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteFile(::grpc::ServerContext* context, ::simplidfs::WriteFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::simplidfs::SimpleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadFile() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::simplidfs::ReadFileRequest* /*request*/, ::simplidfs::ReadFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadFile(::grpc::ServerContext* context, ::simplidfs::ReadFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::simplidfs::ReadFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteFile() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::simplidfs::DeleteFileRequest* /*request*/, ::simplidfs::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteFile(::grpc::ServerContext* context, ::simplidfs::DeleteFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::simplidfs::SimpleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateFile<WithAsyncMethod_WriteFile<WithAsyncMethod_ReadFile<WithAsyncMethod_DeleteFile<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateFile() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::simplidfs::CreateFileRequest, ::simplidfs::SimpleResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::simplidfs::CreateFileRequest* request, ::simplidfs::SimpleResponse* response) { return this->CreateFile(context, request, response); }));}
    void SetMessageAllocatorFor_CreateFile(
        ::grpc::MessageAllocator< ::simplidfs::CreateFileRequest, ::simplidfs::SimpleResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::simplidfs::CreateFileRequest, ::simplidfs::SimpleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::simplidfs::CreateFileRequest* /*request*/, ::simplidfs::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateFile(
      ::grpc::CallbackServerContext* /*context*/, const ::simplidfs::CreateFileRequest* /*request*/, ::simplidfs::SimpleResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WriteFile() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::simplidfs::WriteFileRequest, ::simplidfs::SimpleResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::simplidfs::WriteFileRequest* request, ::simplidfs::SimpleResponse* response) { return this->WriteFile(context, request, response); }));}
    void SetMessageAllocatorFor_WriteFile(
        ::grpc::MessageAllocator< ::simplidfs::WriteFileRequest, ::simplidfs::SimpleResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::simplidfs::WriteFileRequest, ::simplidfs::SimpleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteFile(::grpc::ServerContext* /*context*/, const ::simplidfs::WriteFileRequest* /*request*/, ::simplidfs::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteFile(
      ::grpc::CallbackServerContext* /*context*/, const ::simplidfs::WriteFileRequest* /*request*/, ::simplidfs::SimpleResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadFile() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::simplidfs::ReadFileRequest, ::simplidfs::ReadFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::simplidfs::ReadFileRequest* request, ::simplidfs::ReadFileResponse* response) { return this->ReadFile(context, request, response); }));}
    void SetMessageAllocatorFor_ReadFile(
        ::grpc::MessageAllocator< ::simplidfs::ReadFileRequest, ::simplidfs::ReadFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::simplidfs::ReadFileRequest, ::simplidfs::ReadFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::simplidfs::ReadFileRequest* /*request*/, ::simplidfs::ReadFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadFile(
      ::grpc::CallbackServerContext* /*context*/, const ::simplidfs::ReadFileRequest* /*request*/, ::simplidfs::ReadFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteFile() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::simplidfs::DeleteFileRequest, ::simplidfs::SimpleResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::simplidfs::DeleteFileRequest* request, ::simplidfs::SimpleResponse* response) { return this->DeleteFile(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteFile(
        ::grpc::MessageAllocator< ::simplidfs::DeleteFileRequest, ::simplidfs::SimpleResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::simplidfs::DeleteFileRequest, ::simplidfs::SimpleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::simplidfs::DeleteFileRequest* /*request*/, ::simplidfs::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteFile(
      ::grpc::CallbackServerContext* /*context*/, const ::simplidfs::DeleteFileRequest* /*request*/, ::simplidfs::SimpleResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateFile<WithCallbackMethod_WriteFile<WithCallbackMethod_ReadFile<WithCallbackMethod_DeleteFile<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateFile() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::simplidfs::CreateFileRequest* /*request*/, ::simplidfs::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WriteFile() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_WriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteFile(::grpc::ServerContext* /*context*/, const ::simplidfs::WriteFileRequest* /*request*/, ::simplidfs::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadFile() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::simplidfs::ReadFileRequest* /*request*/, ::simplidfs::ReadFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteFile() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::simplidfs::DeleteFileRequest* /*request*/, ::simplidfs::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateFile() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::simplidfs::CreateFileRequest* /*request*/, ::simplidfs::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WriteFile() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_WriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteFile(::grpc::ServerContext* /*context*/, const ::simplidfs::WriteFileRequest* /*request*/, ::simplidfs::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadFile() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::simplidfs::ReadFileRequest* /*request*/, ::simplidfs::ReadFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteFile() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::simplidfs::DeleteFileRequest* /*request*/, ::simplidfs::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateFile() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::simplidfs::CreateFileRequest* /*request*/, ::simplidfs::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WriteFile() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WriteFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_WriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteFile(::grpc::ServerContext* /*context*/, const ::simplidfs::WriteFileRequest* /*request*/, ::simplidfs::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadFile() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::simplidfs::ReadFileRequest* /*request*/, ::simplidfs::ReadFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteFile() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::simplidfs::DeleteFileRequest* /*request*/, ::simplidfs::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateFile() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::simplidfs::CreateFileRequest, ::simplidfs::SimpleResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::simplidfs::CreateFileRequest, ::simplidfs::SimpleResponse>* streamer) {
                       return this->StreamedCreateFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::simplidfs::CreateFileRequest* /*request*/, ::simplidfs::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::simplidfs::CreateFileRequest,::simplidfs::SimpleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WriteFile() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::simplidfs::WriteFileRequest, ::simplidfs::SimpleResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::simplidfs::WriteFileRequest, ::simplidfs::SimpleResponse>* streamer) {
                       return this->StreamedWriteFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WriteFile(::grpc::ServerContext* /*context*/, const ::simplidfs::WriteFileRequest* /*request*/, ::simplidfs::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWriteFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::simplidfs::WriteFileRequest,::simplidfs::SimpleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadFile() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::simplidfs::ReadFileRequest, ::simplidfs::ReadFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::simplidfs::ReadFileRequest, ::simplidfs::ReadFileResponse>* streamer) {
                       return this->StreamedReadFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::simplidfs::ReadFileRequest* /*request*/, ::simplidfs::ReadFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::simplidfs::ReadFileRequest,::simplidfs::ReadFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteFile() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::simplidfs::DeleteFileRequest, ::simplidfs::SimpleResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::simplidfs::DeleteFileRequest, ::simplidfs::SimpleResponse>* streamer) {
                       return this->StreamedDeleteFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::simplidfs::DeleteFileRequest* /*request*/, ::simplidfs::SimpleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::simplidfs::DeleteFileRequest,::simplidfs::SimpleResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateFile<WithStreamedUnaryMethod_WriteFile<WithStreamedUnaryMethod_ReadFile<WithStreamedUnaryMethod_DeleteFile<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateFile<WithStreamedUnaryMethod_WriteFile<WithStreamedUnaryMethod_ReadFile<WithStreamedUnaryMethod_DeleteFile<Service > > > > StreamedService;
};

}  // namespace simplidfs


#endif  // GRPC_proto_2ffilesystem_2eproto__INCLUDED
