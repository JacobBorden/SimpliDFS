// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spiffe/workload/workload.proto

#include "spiffe/workload/workload.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR X509SVIDRequest::X509SVIDRequest(
    ::_pbi::ConstantInitialized) {}
struct X509SVIDRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR X509SVIDRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~X509SVIDRequestDefaultTypeInternal() {}
  union {
    X509SVIDRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 X509SVIDRequestDefaultTypeInternal _X509SVIDRequest_default_instance_;
PROTOBUF_CONSTEXPR X509SVIDResponse_FederatedBundlesEntry_DoNotUse::X509SVIDResponse_FederatedBundlesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct X509SVIDResponse_FederatedBundlesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR X509SVIDResponse_FederatedBundlesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~X509SVIDResponse_FederatedBundlesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    X509SVIDResponse_FederatedBundlesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 X509SVIDResponse_FederatedBundlesEntry_DoNotUseDefaultTypeInternal _X509SVIDResponse_FederatedBundlesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR X509SVIDResponse::X509SVIDResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.svids_)*/{}
  , /*decltype(_impl_.crl_)*/{}
  , /*decltype(_impl_.federated_bundles_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct X509SVIDResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR X509SVIDResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~X509SVIDResponseDefaultTypeInternal() {}
  union {
    X509SVIDResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 X509SVIDResponseDefaultTypeInternal _X509SVIDResponse_default_instance_;
PROTOBUF_CONSTEXPR X509SVID::X509SVID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.spiffe_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.x509_svid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.x509_svid_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bundle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hint_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct X509SVIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR X509SVIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~X509SVIDDefaultTypeInternal() {}
  union {
    X509SVID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 X509SVIDDefaultTypeInternal _X509SVID_default_instance_;
PROTOBUF_CONSTEXPR X509BundlesRequest::X509BundlesRequest(
    ::_pbi::ConstantInitialized) {}
struct X509BundlesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR X509BundlesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~X509BundlesRequestDefaultTypeInternal() {}
  union {
    X509BundlesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 X509BundlesRequestDefaultTypeInternal _X509BundlesRequest_default_instance_;
PROTOBUF_CONSTEXPR X509BundlesResponse_BundlesEntry_DoNotUse::X509BundlesResponse_BundlesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct X509BundlesResponse_BundlesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR X509BundlesResponse_BundlesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~X509BundlesResponse_BundlesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    X509BundlesResponse_BundlesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 X509BundlesResponse_BundlesEntry_DoNotUseDefaultTypeInternal _X509BundlesResponse_BundlesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR X509BundlesResponse::X509BundlesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.crl_)*/{}
  , /*decltype(_impl_.bundles_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct X509BundlesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR X509BundlesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~X509BundlesResponseDefaultTypeInternal() {}
  union {
    X509BundlesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 X509BundlesResponseDefaultTypeInternal _X509BundlesResponse_default_instance_;
PROTOBUF_CONSTEXPR JWTSVIDRequest::JWTSVIDRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.audience_)*/{}
  , /*decltype(_impl_.spiffe_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JWTSVIDRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JWTSVIDRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JWTSVIDRequestDefaultTypeInternal() {}
  union {
    JWTSVIDRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JWTSVIDRequestDefaultTypeInternal _JWTSVIDRequest_default_instance_;
PROTOBUF_CONSTEXPR JWTSVIDResponse::JWTSVIDResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.svids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JWTSVIDResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JWTSVIDResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JWTSVIDResponseDefaultTypeInternal() {}
  union {
    JWTSVIDResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JWTSVIDResponseDefaultTypeInternal _JWTSVIDResponse_default_instance_;
PROTOBUF_CONSTEXPR JWTSVID::JWTSVID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.spiffe_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.svid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hint_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JWTSVIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JWTSVIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JWTSVIDDefaultTypeInternal() {}
  union {
    JWTSVID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JWTSVIDDefaultTypeInternal _JWTSVID_default_instance_;
PROTOBUF_CONSTEXPR JWTBundlesRequest::JWTBundlesRequest(
    ::_pbi::ConstantInitialized) {}
struct JWTBundlesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JWTBundlesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JWTBundlesRequestDefaultTypeInternal() {}
  union {
    JWTBundlesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JWTBundlesRequestDefaultTypeInternal _JWTBundlesRequest_default_instance_;
PROTOBUF_CONSTEXPR JWTBundlesResponse_BundlesEntry_DoNotUse::JWTBundlesResponse_BundlesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct JWTBundlesResponse_BundlesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JWTBundlesResponse_BundlesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JWTBundlesResponse_BundlesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    JWTBundlesResponse_BundlesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JWTBundlesResponse_BundlesEntry_DoNotUseDefaultTypeInternal _JWTBundlesResponse_BundlesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR JWTBundlesResponse::JWTBundlesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bundles_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JWTBundlesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JWTBundlesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JWTBundlesResponseDefaultTypeInternal() {}
  union {
    JWTBundlesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JWTBundlesResponseDefaultTypeInternal _JWTBundlesResponse_default_instance_;
PROTOBUF_CONSTEXPR ValidateJWTSVIDRequest::ValidateJWTSVIDRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.audience_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.svid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValidateJWTSVIDRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidateJWTSVIDRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidateJWTSVIDRequestDefaultTypeInternal() {}
  union {
    ValidateJWTSVIDRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidateJWTSVIDRequestDefaultTypeInternal _ValidateJWTSVIDRequest_default_instance_;
PROTOBUF_CONSTEXPR ValidateJWTSVIDResponse::ValidateJWTSVIDResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.spiffe_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.claims_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValidateJWTSVIDResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidateJWTSVIDResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidateJWTSVIDResponseDefaultTypeInternal() {}
  union {
    ValidateJWTSVIDResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidateJWTSVIDResponseDefaultTypeInternal _ValidateJWTSVIDResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_spiffe_2fworkload_2fworkload_2eproto[15];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_spiffe_2fworkload_2fworkload_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_spiffe_2fworkload_2fworkload_2eproto = nullptr;

const uint32_t TableStruct_spiffe_2fworkload_2fworkload_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::X509SVIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::X509SVIDResponse_FederatedBundlesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::X509SVIDResponse_FederatedBundlesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::X509SVIDResponse_FederatedBundlesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::X509SVIDResponse_FederatedBundlesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::X509SVIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::X509SVIDResponse, _impl_.svids_),
  PROTOBUF_FIELD_OFFSET(::X509SVIDResponse, _impl_.crl_),
  PROTOBUF_FIELD_OFFSET(::X509SVIDResponse, _impl_.federated_bundles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::X509SVID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::X509SVID, _impl_.spiffe_id_),
  PROTOBUF_FIELD_OFFSET(::X509SVID, _impl_.x509_svid_),
  PROTOBUF_FIELD_OFFSET(::X509SVID, _impl_.x509_svid_key_),
  PROTOBUF_FIELD_OFFSET(::X509SVID, _impl_.bundle_),
  PROTOBUF_FIELD_OFFSET(::X509SVID, _impl_.hint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::X509BundlesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::X509BundlesResponse_BundlesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::X509BundlesResponse_BundlesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::X509BundlesResponse_BundlesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::X509BundlesResponse_BundlesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::X509BundlesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::X509BundlesResponse, _impl_.crl_),
  PROTOBUF_FIELD_OFFSET(::X509BundlesResponse, _impl_.bundles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JWTSVIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JWTSVIDRequest, _impl_.audience_),
  PROTOBUF_FIELD_OFFSET(::JWTSVIDRequest, _impl_.spiffe_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JWTSVIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JWTSVIDResponse, _impl_.svids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JWTSVID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JWTSVID, _impl_.spiffe_id_),
  PROTOBUF_FIELD_OFFSET(::JWTSVID, _impl_.svid_),
  PROTOBUF_FIELD_OFFSET(::JWTSVID, _impl_.hint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JWTBundlesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JWTBundlesResponse_BundlesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::JWTBundlesResponse_BundlesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JWTBundlesResponse_BundlesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::JWTBundlesResponse_BundlesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JWTBundlesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JWTBundlesResponse, _impl_.bundles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ValidateJWTSVIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ValidateJWTSVIDRequest, _impl_.audience_),
  PROTOBUF_FIELD_OFFSET(::ValidateJWTSVIDRequest, _impl_.svid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ValidateJWTSVIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ValidateJWTSVIDResponse, _impl_.spiffe_id_),
  PROTOBUF_FIELD_OFFSET(::ValidateJWTSVIDResponse, _impl_.claims_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::X509SVIDRequest)},
  { 6, 14, -1, sizeof(::X509SVIDResponse_FederatedBundlesEntry_DoNotUse)},
  { 16, -1, -1, sizeof(::X509SVIDResponse)},
  { 25, -1, -1, sizeof(::X509SVID)},
  { 36, -1, -1, sizeof(::X509BundlesRequest)},
  { 42, 50, -1, sizeof(::X509BundlesResponse_BundlesEntry_DoNotUse)},
  { 52, -1, -1, sizeof(::X509BundlesResponse)},
  { 60, -1, -1, sizeof(::JWTSVIDRequest)},
  { 68, -1, -1, sizeof(::JWTSVIDResponse)},
  { 75, -1, -1, sizeof(::JWTSVID)},
  { 84, -1, -1, sizeof(::JWTBundlesRequest)},
  { 90, 98, -1, sizeof(::JWTBundlesResponse_BundlesEntry_DoNotUse)},
  { 100, -1, -1, sizeof(::JWTBundlesResponse)},
  { 107, -1, -1, sizeof(::ValidateJWTSVIDRequest)},
  { 115, -1, -1, sizeof(::ValidateJWTSVIDResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_X509SVIDRequest_default_instance_._instance,
  &::_X509SVIDResponse_FederatedBundlesEntry_DoNotUse_default_instance_._instance,
  &::_X509SVIDResponse_default_instance_._instance,
  &::_X509SVID_default_instance_._instance,
  &::_X509BundlesRequest_default_instance_._instance,
  &::_X509BundlesResponse_BundlesEntry_DoNotUse_default_instance_._instance,
  &::_X509BundlesResponse_default_instance_._instance,
  &::_JWTSVIDRequest_default_instance_._instance,
  &::_JWTSVIDResponse_default_instance_._instance,
  &::_JWTSVID_default_instance_._instance,
  &::_JWTBundlesRequest_default_instance_._instance,
  &::_JWTBundlesResponse_BundlesEntry_DoNotUse_default_instance_._instance,
  &::_JWTBundlesResponse_default_instance_._instance,
  &::_ValidateJWTSVIDRequest_default_instance_._instance,
  &::_ValidateJWTSVIDResponse_default_instance_._instance,
};

const char descriptor_table_protodef_spiffe_2fworkload_2fworkload_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036spiffe/workload/workload.proto\032\034google"
  "/protobuf/struct.proto\"\021\n\017X509SVIDReques"
  "t\"\266\001\n\020X509SVIDResponse\022\030\n\005svids\030\001 \003(\0132\t."
  "X509SVID\022\013\n\003crl\030\002 \003(\014\022B\n\021federated_bundl"
  "es\030\003 \003(\0132\'.X509SVIDResponse.FederatedBun"
  "dlesEntry\0327\n\025FederatedBundlesEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"e\n\010X509SVID\022\021"
  "\n\tspiffe_id\030\001 \001(\t\022\021\n\tx509_svid\030\002 \001(\014\022\025\n\r"
  "x509_svid_key\030\003 \001(\014\022\016\n\006bundle\030\004 \001(\014\022\014\n\004h"
  "int\030\005 \001(\t\"\024\n\022X509BundlesRequest\"\206\001\n\023X509"
  "BundlesResponse\022\013\n\003crl\030\001 \003(\014\0222\n\007bundles\030"
  "\002 \003(\0132!.X509BundlesResponse.BundlesEntry"
  "\032.\n\014BundlesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
  " \001(\014:\0028\001\"5\n\016JWTSVIDRequest\022\020\n\010audience\030\001"
  " \003(\t\022\021\n\tspiffe_id\030\002 \001(\t\"*\n\017JWTSVIDRespon"
  "se\022\027\n\005svids\030\001 \003(\0132\010.JWTSVID\"8\n\007JWTSVID\022\021"
  "\n\tspiffe_id\030\001 \001(\t\022\014\n\004svid\030\002 \001(\t\022\014\n\004hint\030"
  "\003 \001(\t\"\023\n\021JWTBundlesRequest\"w\n\022JWTBundles"
  "Response\0221\n\007bundles\030\001 \003(\0132 .JWTBundlesRe"
  "sponse.BundlesEntry\032.\n\014BundlesEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"8\n\026ValidateJ"
  "WTSVIDRequest\022\020\n\010audience\030\001 \001(\t\022\014\n\004svid\030"
  "\002 \001(\t\"U\n\027ValidateJWTSVIDResponse\022\021\n\tspif"
  "fe_id\030\001 \001(\t\022\'\n\006claims\030\002 \001(\0132\027.google.pro"
  "tobuf.Struct2\303\002\n\021SpiffeWorkloadAPI\0226\n\rFe"
  "tchX509SVID\022\020.X509SVIDRequest\032\021.X509SVID"
  "Response0\001\022\?\n\020FetchX509Bundles\022\023.X509Bun"
  "dlesRequest\032\024.X509BundlesResponse0\001\0221\n\014F"
  "etchJWTSVID\022\017.JWTSVIDRequest\032\020.JWTSVIDRe"
  "sponse\022<\n\017FetchJWTBundles\022\022.JWTBundlesRe"
  "quest\032\023.JWTBundlesResponse0\001\022D\n\017Validate"
  "JWTSVID\022\027.ValidateJWTSVIDRequest\032\030.Valid"
  "ateJWTSVIDResponseB\?Z=github.com/spiffe/"
  "go-spiffe/v2/proto/spiffe/workload;workl"
  "oadb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_spiffe_2fworkload_2fworkload_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
};
static ::_pbi::once_flag descriptor_table_spiffe_2fworkload_2fworkload_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_spiffe_2fworkload_2fworkload_2eproto = {
    false, false, 1371, descriptor_table_protodef_spiffe_2fworkload_2fworkload_2eproto,
    "spiffe/workload/workload.proto",
    &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_once, descriptor_table_spiffe_2fworkload_2fworkload_2eproto_deps, 1, 15,
    schemas, file_default_instances, TableStruct_spiffe_2fworkload_2fworkload_2eproto::offsets,
    file_level_metadata_spiffe_2fworkload_2fworkload_2eproto, file_level_enum_descriptors_spiffe_2fworkload_2fworkload_2eproto,
    file_level_service_descriptors_spiffe_2fworkload_2fworkload_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_spiffe_2fworkload_2fworkload_2eproto_getter() {
  return &descriptor_table_spiffe_2fworkload_2fworkload_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_spiffe_2fworkload_2fworkload_2eproto(&descriptor_table_spiffe_2fworkload_2fworkload_2eproto);

// ===================================================================

class X509SVIDRequest::_Internal {
 public:
};

X509SVIDRequest::X509SVIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:X509SVIDRequest)
}
X509SVIDRequest::X509SVIDRequest(const X509SVIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  X509SVIDRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:X509SVIDRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData X509SVIDRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*X509SVIDRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata X509SVIDRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_getter, &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_once,
      file_level_metadata_spiffe_2fworkload_2fworkload_2eproto[0]);
}

// ===================================================================

X509SVIDResponse_FederatedBundlesEntry_DoNotUse::X509SVIDResponse_FederatedBundlesEntry_DoNotUse() {}
X509SVIDResponse_FederatedBundlesEntry_DoNotUse::X509SVIDResponse_FederatedBundlesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void X509SVIDResponse_FederatedBundlesEntry_DoNotUse::MergeFrom(const X509SVIDResponse_FederatedBundlesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata X509SVIDResponse_FederatedBundlesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_getter, &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_once,
      file_level_metadata_spiffe_2fworkload_2fworkload_2eproto[1]);
}

// ===================================================================

class X509SVIDResponse::_Internal {
 public:
};

X509SVIDResponse::X509SVIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &X509SVIDResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:X509SVIDResponse)
}
X509SVIDResponse::X509SVIDResponse(const X509SVIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  X509SVIDResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.svids_){from._impl_.svids_}
    , decltype(_impl_.crl_){from._impl_.crl_}
    , /*decltype(_impl_.federated_bundles_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.federated_bundles_.MergeFrom(from._impl_.federated_bundles_);
  // @@protoc_insertion_point(copy_constructor:X509SVIDResponse)
}

inline void X509SVIDResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.svids_){arena}
    , decltype(_impl_.crl_){arena}
    , /*decltype(_impl_.federated_bundles_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

X509SVIDResponse::~X509SVIDResponse() {
  // @@protoc_insertion_point(destructor:X509SVIDResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void X509SVIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.svids_.~RepeatedPtrField();
  _impl_.crl_.~RepeatedPtrField();
  _impl_.federated_bundles_.Destruct();
  _impl_.federated_bundles_.~MapField();
}

void X509SVIDResponse::ArenaDtor(void* object) {
  X509SVIDResponse* _this = reinterpret_cast< X509SVIDResponse* >(object);
  _this->_impl_.federated_bundles_.Destruct();
}
void X509SVIDResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void X509SVIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:X509SVIDResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.svids_.Clear();
  _impl_.crl_.Clear();
  _impl_.federated_bundles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* X509SVIDResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .X509SVID svids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_svids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes crl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_crl();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, bytes> federated_bundles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.federated_bundles_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* X509SVIDResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:X509SVIDResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .X509SVID svids = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_svids_size()); i < n; i++) {
    const auto& repfield = this->_internal_svids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated bytes crl = 2;
  for (int i = 0, n = this->_internal_crl_size(); i < n; i++) {
    const auto& s = this->_internal_crl(i);
    target = stream->WriteBytes(2, s, target);
  }

  // map<string, bytes> federated_bundles = 3;
  if (!this->_internal_federated_bundles().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = X509SVIDResponse_FederatedBundlesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_federated_bundles();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "X509SVIDResponse.FederatedBundlesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:X509SVIDResponse)
  return target;
}

size_t X509SVIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:X509SVIDResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .X509SVID svids = 1;
  total_size += 1UL * this->_internal_svids_size();
  for (const auto& msg : this->_impl_.svids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes crl = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.crl_.size());
  for (int i = 0, n = _impl_.crl_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.crl_.Get(i));
  }

  // map<string, bytes> federated_bundles = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_federated_bundles_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_federated_bundles().begin();
      it != this->_internal_federated_bundles().end(); ++it) {
    total_size += X509SVIDResponse_FederatedBundlesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData X509SVIDResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    X509SVIDResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*X509SVIDResponse::GetClassData() const { return &_class_data_; }


void X509SVIDResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<X509SVIDResponse*>(&to_msg);
  auto& from = static_cast<const X509SVIDResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:X509SVIDResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.svids_.MergeFrom(from._impl_.svids_);
  _this->_impl_.crl_.MergeFrom(from._impl_.crl_);
  _this->_impl_.federated_bundles_.MergeFrom(from._impl_.federated_bundles_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void X509SVIDResponse::CopyFrom(const X509SVIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:X509SVIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X509SVIDResponse::IsInitialized() const {
  return true;
}

void X509SVIDResponse::InternalSwap(X509SVIDResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.svids_.InternalSwap(&other->_impl_.svids_);
  _impl_.crl_.InternalSwap(&other->_impl_.crl_);
  _impl_.federated_bundles_.InternalSwap(&other->_impl_.federated_bundles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata X509SVIDResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_getter, &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_once,
      file_level_metadata_spiffe_2fworkload_2fworkload_2eproto[2]);
}

// ===================================================================

class X509SVID::_Internal {
 public:
};

X509SVID::X509SVID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:X509SVID)
}
X509SVID::X509SVID(const X509SVID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  X509SVID* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.spiffe_id_){}
    , decltype(_impl_.x509_svid_){}
    , decltype(_impl_.x509_svid_key_){}
    , decltype(_impl_.bundle_){}
    , decltype(_impl_.hint_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.spiffe_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spiffe_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_spiffe_id().empty()) {
    _this->_impl_.spiffe_id_.Set(from._internal_spiffe_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.x509_svid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x509_svid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_x509_svid().empty()) {
    _this->_impl_.x509_svid_.Set(from._internal_x509_svid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.x509_svid_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x509_svid_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_x509_svid_key().empty()) {
    _this->_impl_.x509_svid_key_.Set(from._internal_x509_svid_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bundle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bundle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bundle().empty()) {
    _this->_impl_.bundle_.Set(from._internal_bundle(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hint().empty()) {
    _this->_impl_.hint_.Set(from._internal_hint(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:X509SVID)
}

inline void X509SVID::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.spiffe_id_){}
    , decltype(_impl_.x509_svid_){}
    , decltype(_impl_.x509_svid_key_){}
    , decltype(_impl_.bundle_){}
    , decltype(_impl_.hint_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.spiffe_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spiffe_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.x509_svid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x509_svid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.x509_svid_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x509_svid_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bundle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bundle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

X509SVID::~X509SVID() {
  // @@protoc_insertion_point(destructor:X509SVID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void X509SVID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.spiffe_id_.Destroy();
  _impl_.x509_svid_.Destroy();
  _impl_.x509_svid_key_.Destroy();
  _impl_.bundle_.Destroy();
  _impl_.hint_.Destroy();
}

void X509SVID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void X509SVID::Clear() {
// @@protoc_insertion_point(message_clear_start:X509SVID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.spiffe_id_.ClearToEmpty();
  _impl_.x509_svid_.ClearToEmpty();
  _impl_.x509_svid_key_.ClearToEmpty();
  _impl_.bundle_.ClearToEmpty();
  _impl_.hint_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* X509SVID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string spiffe_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_spiffe_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "X509SVID.spiffe_id"));
        } else
          goto handle_unusual;
        continue;
      // bytes x509_svid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_x509_svid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes x509_svid_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_x509_svid_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes bundle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_bundle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string hint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_hint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "X509SVID.hint"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* X509SVID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:X509SVID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string spiffe_id = 1;
  if (!this->_internal_spiffe_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spiffe_id().data(), static_cast<int>(this->_internal_spiffe_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "X509SVID.spiffe_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_spiffe_id(), target);
  }

  // bytes x509_svid = 2;
  if (!this->_internal_x509_svid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_x509_svid(), target);
  }

  // bytes x509_svid_key = 3;
  if (!this->_internal_x509_svid_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_x509_svid_key(), target);
  }

  // bytes bundle = 4;
  if (!this->_internal_bundle().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_bundle(), target);
  }

  // string hint = 5;
  if (!this->_internal_hint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hint().data(), static_cast<int>(this->_internal_hint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "X509SVID.hint");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_hint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:X509SVID)
  return target;
}

size_t X509SVID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:X509SVID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string spiffe_id = 1;
  if (!this->_internal_spiffe_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spiffe_id());
  }

  // bytes x509_svid = 2;
  if (!this->_internal_x509_svid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_x509_svid());
  }

  // bytes x509_svid_key = 3;
  if (!this->_internal_x509_svid_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_x509_svid_key());
  }

  // bytes bundle = 4;
  if (!this->_internal_bundle().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bundle());
  }

  // string hint = 5;
  if (!this->_internal_hint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hint());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData X509SVID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    X509SVID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*X509SVID::GetClassData() const { return &_class_data_; }


void X509SVID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<X509SVID*>(&to_msg);
  auto& from = static_cast<const X509SVID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:X509SVID)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_spiffe_id().empty()) {
    _this->_internal_set_spiffe_id(from._internal_spiffe_id());
  }
  if (!from._internal_x509_svid().empty()) {
    _this->_internal_set_x509_svid(from._internal_x509_svid());
  }
  if (!from._internal_x509_svid_key().empty()) {
    _this->_internal_set_x509_svid_key(from._internal_x509_svid_key());
  }
  if (!from._internal_bundle().empty()) {
    _this->_internal_set_bundle(from._internal_bundle());
  }
  if (!from._internal_hint().empty()) {
    _this->_internal_set_hint(from._internal_hint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void X509SVID::CopyFrom(const X509SVID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:X509SVID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X509SVID::IsInitialized() const {
  return true;
}

void X509SVID::InternalSwap(X509SVID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.spiffe_id_, lhs_arena,
      &other->_impl_.spiffe_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.x509_svid_, lhs_arena,
      &other->_impl_.x509_svid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.x509_svid_key_, lhs_arena,
      &other->_impl_.x509_svid_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bundle_, lhs_arena,
      &other->_impl_.bundle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hint_, lhs_arena,
      &other->_impl_.hint_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata X509SVID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_getter, &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_once,
      file_level_metadata_spiffe_2fworkload_2fworkload_2eproto[3]);
}

// ===================================================================

class X509BundlesRequest::_Internal {
 public:
};

X509BundlesRequest::X509BundlesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:X509BundlesRequest)
}
X509BundlesRequest::X509BundlesRequest(const X509BundlesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  X509BundlesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:X509BundlesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData X509BundlesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*X509BundlesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata X509BundlesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_getter, &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_once,
      file_level_metadata_spiffe_2fworkload_2fworkload_2eproto[4]);
}

// ===================================================================

X509BundlesResponse_BundlesEntry_DoNotUse::X509BundlesResponse_BundlesEntry_DoNotUse() {}
X509BundlesResponse_BundlesEntry_DoNotUse::X509BundlesResponse_BundlesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void X509BundlesResponse_BundlesEntry_DoNotUse::MergeFrom(const X509BundlesResponse_BundlesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata X509BundlesResponse_BundlesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_getter, &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_once,
      file_level_metadata_spiffe_2fworkload_2fworkload_2eproto[5]);
}

// ===================================================================

class X509BundlesResponse::_Internal {
 public:
};

X509BundlesResponse::X509BundlesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &X509BundlesResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:X509BundlesResponse)
}
X509BundlesResponse::X509BundlesResponse(const X509BundlesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  X509BundlesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.crl_){from._impl_.crl_}
    , /*decltype(_impl_.bundles_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.bundles_.MergeFrom(from._impl_.bundles_);
  // @@protoc_insertion_point(copy_constructor:X509BundlesResponse)
}

inline void X509BundlesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.crl_){arena}
    , /*decltype(_impl_.bundles_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

X509BundlesResponse::~X509BundlesResponse() {
  // @@protoc_insertion_point(destructor:X509BundlesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void X509BundlesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.crl_.~RepeatedPtrField();
  _impl_.bundles_.Destruct();
  _impl_.bundles_.~MapField();
}

void X509BundlesResponse::ArenaDtor(void* object) {
  X509BundlesResponse* _this = reinterpret_cast< X509BundlesResponse* >(object);
  _this->_impl_.bundles_.Destruct();
}
void X509BundlesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void X509BundlesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:X509BundlesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.crl_.Clear();
  _impl_.bundles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* X509BundlesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes crl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_crl();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, bytes> bundles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.bundles_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* X509BundlesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:X509BundlesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes crl = 1;
  for (int i = 0, n = this->_internal_crl_size(); i < n; i++) {
    const auto& s = this->_internal_crl(i);
    target = stream->WriteBytes(1, s, target);
  }

  // map<string, bytes> bundles = 2;
  if (!this->_internal_bundles().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = X509BundlesResponse_BundlesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_bundles();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "X509BundlesResponse.BundlesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:X509BundlesResponse)
  return target;
}

size_t X509BundlesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:X509BundlesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes crl = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.crl_.size());
  for (int i = 0, n = _impl_.crl_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.crl_.Get(i));
  }

  // map<string, bytes> bundles = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bundles_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_bundles().begin();
      it != this->_internal_bundles().end(); ++it) {
    total_size += X509BundlesResponse_BundlesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData X509BundlesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    X509BundlesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*X509BundlesResponse::GetClassData() const { return &_class_data_; }


void X509BundlesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<X509BundlesResponse*>(&to_msg);
  auto& from = static_cast<const X509BundlesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:X509BundlesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.crl_.MergeFrom(from._impl_.crl_);
  _this->_impl_.bundles_.MergeFrom(from._impl_.bundles_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void X509BundlesResponse::CopyFrom(const X509BundlesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:X509BundlesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X509BundlesResponse::IsInitialized() const {
  return true;
}

void X509BundlesResponse::InternalSwap(X509BundlesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.crl_.InternalSwap(&other->_impl_.crl_);
  _impl_.bundles_.InternalSwap(&other->_impl_.bundles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata X509BundlesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_getter, &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_once,
      file_level_metadata_spiffe_2fworkload_2fworkload_2eproto[6]);
}

// ===================================================================

class JWTSVIDRequest::_Internal {
 public:
};

JWTSVIDRequest::JWTSVIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JWTSVIDRequest)
}
JWTSVIDRequest::JWTSVIDRequest(const JWTSVIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JWTSVIDRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.audience_){from._impl_.audience_}
    , decltype(_impl_.spiffe_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.spiffe_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spiffe_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_spiffe_id().empty()) {
    _this->_impl_.spiffe_id_.Set(from._internal_spiffe_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:JWTSVIDRequest)
}

inline void JWTSVIDRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.audience_){arena}
    , decltype(_impl_.spiffe_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.spiffe_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spiffe_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JWTSVIDRequest::~JWTSVIDRequest() {
  // @@protoc_insertion_point(destructor:JWTSVIDRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JWTSVIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.audience_.~RepeatedPtrField();
  _impl_.spiffe_id_.Destroy();
}

void JWTSVIDRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JWTSVIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:JWTSVIDRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.audience_.Clear();
  _impl_.spiffe_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JWTSVIDRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string audience = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_audience();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "JWTSVIDRequest.audience"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string spiffe_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_spiffe_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "JWTSVIDRequest.spiffe_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JWTSVIDRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JWTSVIDRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string audience = 1;
  for (int i = 0, n = this->_internal_audience_size(); i < n; i++) {
    const auto& s = this->_internal_audience(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JWTSVIDRequest.audience");
    target = stream->WriteString(1, s, target);
  }

  // string spiffe_id = 2;
  if (!this->_internal_spiffe_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spiffe_id().data(), static_cast<int>(this->_internal_spiffe_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JWTSVIDRequest.spiffe_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_spiffe_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JWTSVIDRequest)
  return target;
}

size_t JWTSVIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JWTSVIDRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string audience = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.audience_.size());
  for (int i = 0, n = _impl_.audience_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.audience_.Get(i));
  }

  // string spiffe_id = 2;
  if (!this->_internal_spiffe_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spiffe_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JWTSVIDRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JWTSVIDRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JWTSVIDRequest::GetClassData() const { return &_class_data_; }


void JWTSVIDRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JWTSVIDRequest*>(&to_msg);
  auto& from = static_cast<const JWTSVIDRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JWTSVIDRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.audience_.MergeFrom(from._impl_.audience_);
  if (!from._internal_spiffe_id().empty()) {
    _this->_internal_set_spiffe_id(from._internal_spiffe_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JWTSVIDRequest::CopyFrom(const JWTSVIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JWTSVIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JWTSVIDRequest::IsInitialized() const {
  return true;
}

void JWTSVIDRequest::InternalSwap(JWTSVIDRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.audience_.InternalSwap(&other->_impl_.audience_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.spiffe_id_, lhs_arena,
      &other->_impl_.spiffe_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata JWTSVIDRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_getter, &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_once,
      file_level_metadata_spiffe_2fworkload_2fworkload_2eproto[7]);
}

// ===================================================================

class JWTSVIDResponse::_Internal {
 public:
};

JWTSVIDResponse::JWTSVIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JWTSVIDResponse)
}
JWTSVIDResponse::JWTSVIDResponse(const JWTSVIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JWTSVIDResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.svids_){from._impl_.svids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:JWTSVIDResponse)
}

inline void JWTSVIDResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.svids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

JWTSVIDResponse::~JWTSVIDResponse() {
  // @@protoc_insertion_point(destructor:JWTSVIDResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JWTSVIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.svids_.~RepeatedPtrField();
}

void JWTSVIDResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JWTSVIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:JWTSVIDResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.svids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JWTSVIDResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .JWTSVID svids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_svids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JWTSVIDResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JWTSVIDResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .JWTSVID svids = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_svids_size()); i < n; i++) {
    const auto& repfield = this->_internal_svids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JWTSVIDResponse)
  return target;
}

size_t JWTSVIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JWTSVIDResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .JWTSVID svids = 1;
  total_size += 1UL * this->_internal_svids_size();
  for (const auto& msg : this->_impl_.svids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JWTSVIDResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JWTSVIDResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JWTSVIDResponse::GetClassData() const { return &_class_data_; }


void JWTSVIDResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JWTSVIDResponse*>(&to_msg);
  auto& from = static_cast<const JWTSVIDResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JWTSVIDResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.svids_.MergeFrom(from._impl_.svids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JWTSVIDResponse::CopyFrom(const JWTSVIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JWTSVIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JWTSVIDResponse::IsInitialized() const {
  return true;
}

void JWTSVIDResponse::InternalSwap(JWTSVIDResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.svids_.InternalSwap(&other->_impl_.svids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JWTSVIDResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_getter, &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_once,
      file_level_metadata_spiffe_2fworkload_2fworkload_2eproto[8]);
}

// ===================================================================

class JWTSVID::_Internal {
 public:
};

JWTSVID::JWTSVID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JWTSVID)
}
JWTSVID::JWTSVID(const JWTSVID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JWTSVID* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.spiffe_id_){}
    , decltype(_impl_.svid_){}
    , decltype(_impl_.hint_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.spiffe_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spiffe_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_spiffe_id().empty()) {
    _this->_impl_.spiffe_id_.Set(from._internal_spiffe_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.svid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.svid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_svid().empty()) {
    _this->_impl_.svid_.Set(from._internal_svid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hint().empty()) {
    _this->_impl_.hint_.Set(from._internal_hint(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:JWTSVID)
}

inline void JWTSVID::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.spiffe_id_){}
    , decltype(_impl_.svid_){}
    , decltype(_impl_.hint_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.spiffe_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spiffe_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.svid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.svid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JWTSVID::~JWTSVID() {
  // @@protoc_insertion_point(destructor:JWTSVID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JWTSVID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.spiffe_id_.Destroy();
  _impl_.svid_.Destroy();
  _impl_.hint_.Destroy();
}

void JWTSVID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JWTSVID::Clear() {
// @@protoc_insertion_point(message_clear_start:JWTSVID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.spiffe_id_.ClearToEmpty();
  _impl_.svid_.ClearToEmpty();
  _impl_.hint_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JWTSVID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string spiffe_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_spiffe_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "JWTSVID.spiffe_id"));
        } else
          goto handle_unusual;
        continue;
      // string svid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_svid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "JWTSVID.svid"));
        } else
          goto handle_unusual;
        continue;
      // string hint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_hint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "JWTSVID.hint"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JWTSVID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JWTSVID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string spiffe_id = 1;
  if (!this->_internal_spiffe_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spiffe_id().data(), static_cast<int>(this->_internal_spiffe_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JWTSVID.spiffe_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_spiffe_id(), target);
  }

  // string svid = 2;
  if (!this->_internal_svid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_svid().data(), static_cast<int>(this->_internal_svid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JWTSVID.svid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_svid(), target);
  }

  // string hint = 3;
  if (!this->_internal_hint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hint().data(), static_cast<int>(this->_internal_hint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JWTSVID.hint");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JWTSVID)
  return target;
}

size_t JWTSVID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JWTSVID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string spiffe_id = 1;
  if (!this->_internal_spiffe_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spiffe_id());
  }

  // string svid = 2;
  if (!this->_internal_svid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_svid());
  }

  // string hint = 3;
  if (!this->_internal_hint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hint());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JWTSVID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JWTSVID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JWTSVID::GetClassData() const { return &_class_data_; }


void JWTSVID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JWTSVID*>(&to_msg);
  auto& from = static_cast<const JWTSVID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JWTSVID)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_spiffe_id().empty()) {
    _this->_internal_set_spiffe_id(from._internal_spiffe_id());
  }
  if (!from._internal_svid().empty()) {
    _this->_internal_set_svid(from._internal_svid());
  }
  if (!from._internal_hint().empty()) {
    _this->_internal_set_hint(from._internal_hint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JWTSVID::CopyFrom(const JWTSVID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JWTSVID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JWTSVID::IsInitialized() const {
  return true;
}

void JWTSVID::InternalSwap(JWTSVID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.spiffe_id_, lhs_arena,
      &other->_impl_.spiffe_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.svid_, lhs_arena,
      &other->_impl_.svid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hint_, lhs_arena,
      &other->_impl_.hint_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata JWTSVID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_getter, &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_once,
      file_level_metadata_spiffe_2fworkload_2fworkload_2eproto[9]);
}

// ===================================================================

class JWTBundlesRequest::_Internal {
 public:
};

JWTBundlesRequest::JWTBundlesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:JWTBundlesRequest)
}
JWTBundlesRequest::JWTBundlesRequest(const JWTBundlesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  JWTBundlesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:JWTBundlesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JWTBundlesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JWTBundlesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata JWTBundlesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_getter, &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_once,
      file_level_metadata_spiffe_2fworkload_2fworkload_2eproto[10]);
}

// ===================================================================

JWTBundlesResponse_BundlesEntry_DoNotUse::JWTBundlesResponse_BundlesEntry_DoNotUse() {}
JWTBundlesResponse_BundlesEntry_DoNotUse::JWTBundlesResponse_BundlesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void JWTBundlesResponse_BundlesEntry_DoNotUse::MergeFrom(const JWTBundlesResponse_BundlesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata JWTBundlesResponse_BundlesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_getter, &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_once,
      file_level_metadata_spiffe_2fworkload_2fworkload_2eproto[11]);
}

// ===================================================================

class JWTBundlesResponse::_Internal {
 public:
};

JWTBundlesResponse::JWTBundlesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &JWTBundlesResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:JWTBundlesResponse)
}
JWTBundlesResponse::JWTBundlesResponse(const JWTBundlesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JWTBundlesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.bundles_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.bundles_.MergeFrom(from._impl_.bundles_);
  // @@protoc_insertion_point(copy_constructor:JWTBundlesResponse)
}

inline void JWTBundlesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.bundles_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

JWTBundlesResponse::~JWTBundlesResponse() {
  // @@protoc_insertion_point(destructor:JWTBundlesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void JWTBundlesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bundles_.Destruct();
  _impl_.bundles_.~MapField();
}

void JWTBundlesResponse::ArenaDtor(void* object) {
  JWTBundlesResponse* _this = reinterpret_cast< JWTBundlesResponse* >(object);
  _this->_impl_.bundles_.Destruct();
}
void JWTBundlesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JWTBundlesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:JWTBundlesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bundles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JWTBundlesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, bytes> bundles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.bundles_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JWTBundlesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JWTBundlesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, bytes> bundles = 1;
  if (!this->_internal_bundles().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = JWTBundlesResponse_BundlesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_bundles();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "JWTBundlesResponse.BundlesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JWTBundlesResponse)
  return target;
}

size_t JWTBundlesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JWTBundlesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> bundles = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bundles_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_bundles().begin();
      it != this->_internal_bundles().end(); ++it) {
    total_size += JWTBundlesResponse_BundlesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JWTBundlesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JWTBundlesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JWTBundlesResponse::GetClassData() const { return &_class_data_; }


void JWTBundlesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JWTBundlesResponse*>(&to_msg);
  auto& from = static_cast<const JWTBundlesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JWTBundlesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bundles_.MergeFrom(from._impl_.bundles_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JWTBundlesResponse::CopyFrom(const JWTBundlesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JWTBundlesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JWTBundlesResponse::IsInitialized() const {
  return true;
}

void JWTBundlesResponse::InternalSwap(JWTBundlesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bundles_.InternalSwap(&other->_impl_.bundles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JWTBundlesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_getter, &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_once,
      file_level_metadata_spiffe_2fworkload_2fworkload_2eproto[12]);
}

// ===================================================================

class ValidateJWTSVIDRequest::_Internal {
 public:
};

ValidateJWTSVIDRequest::ValidateJWTSVIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ValidateJWTSVIDRequest)
}
ValidateJWTSVIDRequest::ValidateJWTSVIDRequest(const ValidateJWTSVIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidateJWTSVIDRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.audience_){}
    , decltype(_impl_.svid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.audience_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.audience_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_audience().empty()) {
    _this->_impl_.audience_.Set(from._internal_audience(), 
      _this->GetArenaForAllocation());
  }
  _impl_.svid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.svid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_svid().empty()) {
    _this->_impl_.svid_.Set(from._internal_svid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ValidateJWTSVIDRequest)
}

inline void ValidateJWTSVIDRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.audience_){}
    , decltype(_impl_.svid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.audience_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.audience_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.svid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.svid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ValidateJWTSVIDRequest::~ValidateJWTSVIDRequest() {
  // @@protoc_insertion_point(destructor:ValidateJWTSVIDRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidateJWTSVIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.audience_.Destroy();
  _impl_.svid_.Destroy();
}

void ValidateJWTSVIDRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidateJWTSVIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ValidateJWTSVIDRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.audience_.ClearToEmpty();
  _impl_.svid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateJWTSVIDRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string audience = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_audience();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ValidateJWTSVIDRequest.audience"));
        } else
          goto handle_unusual;
        continue;
      // string svid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_svid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ValidateJWTSVIDRequest.svid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValidateJWTSVIDRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ValidateJWTSVIDRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string audience = 1;
  if (!this->_internal_audience().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audience().data(), static_cast<int>(this->_internal_audience().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ValidateJWTSVIDRequest.audience");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_audience(), target);
  }

  // string svid = 2;
  if (!this->_internal_svid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_svid().data(), static_cast<int>(this->_internal_svid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ValidateJWTSVIDRequest.svid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_svid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ValidateJWTSVIDRequest)
  return target;
}

size_t ValidateJWTSVIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ValidateJWTSVIDRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string audience = 1;
  if (!this->_internal_audience().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audience());
  }

  // string svid = 2;
  if (!this->_internal_svid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_svid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidateJWTSVIDRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidateJWTSVIDRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidateJWTSVIDRequest::GetClassData() const { return &_class_data_; }


void ValidateJWTSVIDRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidateJWTSVIDRequest*>(&to_msg);
  auto& from = static_cast<const ValidateJWTSVIDRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ValidateJWTSVIDRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_audience().empty()) {
    _this->_internal_set_audience(from._internal_audience());
  }
  if (!from._internal_svid().empty()) {
    _this->_internal_set_svid(from._internal_svid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidateJWTSVIDRequest::CopyFrom(const ValidateJWTSVIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ValidateJWTSVIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateJWTSVIDRequest::IsInitialized() const {
  return true;
}

void ValidateJWTSVIDRequest::InternalSwap(ValidateJWTSVIDRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.audience_, lhs_arena,
      &other->_impl_.audience_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.svid_, lhs_arena,
      &other->_impl_.svid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateJWTSVIDRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_getter, &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_once,
      file_level_metadata_spiffe_2fworkload_2fworkload_2eproto[13]);
}

// ===================================================================

class ValidateJWTSVIDResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& claims(const ValidateJWTSVIDResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
ValidateJWTSVIDResponse::_Internal::claims(const ValidateJWTSVIDResponse* msg) {
  return *msg->_impl_.claims_;
}
void ValidateJWTSVIDResponse::clear_claims() {
  if (GetArenaForAllocation() == nullptr && _impl_.claims_ != nullptr) {
    delete _impl_.claims_;
  }
  _impl_.claims_ = nullptr;
}
ValidateJWTSVIDResponse::ValidateJWTSVIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ValidateJWTSVIDResponse)
}
ValidateJWTSVIDResponse::ValidateJWTSVIDResponse(const ValidateJWTSVIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidateJWTSVIDResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.spiffe_id_){}
    , decltype(_impl_.claims_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.spiffe_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spiffe_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_spiffe_id().empty()) {
    _this->_impl_.spiffe_id_.Set(from._internal_spiffe_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_claims()) {
    _this->_impl_.claims_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.claims_);
  }
  // @@protoc_insertion_point(copy_constructor:ValidateJWTSVIDResponse)
}

inline void ValidateJWTSVIDResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.spiffe_id_){}
    , decltype(_impl_.claims_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.spiffe_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spiffe_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ValidateJWTSVIDResponse::~ValidateJWTSVIDResponse() {
  // @@protoc_insertion_point(destructor:ValidateJWTSVIDResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidateJWTSVIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.spiffe_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.claims_;
}

void ValidateJWTSVIDResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidateJWTSVIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ValidateJWTSVIDResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.spiffe_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.claims_ != nullptr) {
    delete _impl_.claims_;
  }
  _impl_.claims_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateJWTSVIDResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string spiffe_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_spiffe_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ValidateJWTSVIDResponse.spiffe_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct claims = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_claims(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValidateJWTSVIDResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ValidateJWTSVIDResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string spiffe_id = 1;
  if (!this->_internal_spiffe_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spiffe_id().data(), static_cast<int>(this->_internal_spiffe_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ValidateJWTSVIDResponse.spiffe_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_spiffe_id(), target);
  }

  // .google.protobuf.Struct claims = 2;
  if (this->_internal_has_claims()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::claims(this),
        _Internal::claims(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ValidateJWTSVIDResponse)
  return target;
}

size_t ValidateJWTSVIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ValidateJWTSVIDResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string spiffe_id = 1;
  if (!this->_internal_spiffe_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spiffe_id());
  }

  // .google.protobuf.Struct claims = 2;
  if (this->_internal_has_claims()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.claims_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidateJWTSVIDResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidateJWTSVIDResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidateJWTSVIDResponse::GetClassData() const { return &_class_data_; }


void ValidateJWTSVIDResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidateJWTSVIDResponse*>(&to_msg);
  auto& from = static_cast<const ValidateJWTSVIDResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ValidateJWTSVIDResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_spiffe_id().empty()) {
    _this->_internal_set_spiffe_id(from._internal_spiffe_id());
  }
  if (from._internal_has_claims()) {
    _this->_internal_mutable_claims()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_claims());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidateJWTSVIDResponse::CopyFrom(const ValidateJWTSVIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ValidateJWTSVIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateJWTSVIDResponse::IsInitialized() const {
  return true;
}

void ValidateJWTSVIDResponse::InternalSwap(ValidateJWTSVIDResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.spiffe_id_, lhs_arena,
      &other->_impl_.spiffe_id_, rhs_arena
  );
  swap(_impl_.claims_, other->_impl_.claims_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateJWTSVIDResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_getter, &descriptor_table_spiffe_2fworkload_2fworkload_2eproto_once,
      file_level_metadata_spiffe_2fworkload_2fworkload_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::X509SVIDRequest*
Arena::CreateMaybeMessage< ::X509SVIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::X509SVIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::X509SVIDResponse_FederatedBundlesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::X509SVIDResponse_FederatedBundlesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::X509SVIDResponse_FederatedBundlesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::X509SVIDResponse*
Arena::CreateMaybeMessage< ::X509SVIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::X509SVIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::X509SVID*
Arena::CreateMaybeMessage< ::X509SVID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::X509SVID >(arena);
}
template<> PROTOBUF_NOINLINE ::X509BundlesRequest*
Arena::CreateMaybeMessage< ::X509BundlesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::X509BundlesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::X509BundlesResponse_BundlesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::X509BundlesResponse_BundlesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::X509BundlesResponse_BundlesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::X509BundlesResponse*
Arena::CreateMaybeMessage< ::X509BundlesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::X509BundlesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::JWTSVIDRequest*
Arena::CreateMaybeMessage< ::JWTSVIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JWTSVIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::JWTSVIDResponse*
Arena::CreateMaybeMessage< ::JWTSVIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JWTSVIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::JWTSVID*
Arena::CreateMaybeMessage< ::JWTSVID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JWTSVID >(arena);
}
template<> PROTOBUF_NOINLINE ::JWTBundlesRequest*
Arena::CreateMaybeMessage< ::JWTBundlesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JWTBundlesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::JWTBundlesResponse_BundlesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::JWTBundlesResponse_BundlesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JWTBundlesResponse_BundlesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::JWTBundlesResponse*
Arena::CreateMaybeMessage< ::JWTBundlesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JWTBundlesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ValidateJWTSVIDRequest*
Arena::CreateMaybeMessage< ::ValidateJWTSVIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ValidateJWTSVIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ValidateJWTSVIDResponse*
Arena::CreateMaybeMessage< ::ValidateJWTSVIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ValidateJWTSVIDResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
