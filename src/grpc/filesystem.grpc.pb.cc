// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/filesystem.proto

#include "proto/filesystem.pb.h"
#include "proto/filesystem.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace simplidfs {

static const char* FileService_method_names[] = {
  "/simplidfs.FileService/CreateFile",
  "/simplidfs.FileService/WriteFile",
  "/simplidfs.FileService/ReadFile",
  "/simplidfs.FileService/DeleteFile",
};

std::unique_ptr< FileService::Stub> FileService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FileService::Stub> stub(new FileService::Stub(channel, options));
  return stub;
}

FileService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateFile_(FileService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteFile_(FileService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadFile_(FileService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteFile_(FileService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FileService::Stub::CreateFile(::grpc::ClientContext* context, const ::simplidfs::CreateFileRequest& request, ::simplidfs::SimpleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::simplidfs::CreateFileRequest, ::simplidfs::SimpleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateFile_, context, request, response);
}

void FileService::Stub::async::CreateFile(::grpc::ClientContext* context, const ::simplidfs::CreateFileRequest* request, ::simplidfs::SimpleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::simplidfs::CreateFileRequest, ::simplidfs::SimpleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateFile_, context, request, response, std::move(f));
}

void FileService::Stub::async::CreateFile(::grpc::ClientContext* context, const ::simplidfs::CreateFileRequest* request, ::simplidfs::SimpleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::simplidfs::SimpleResponse>* FileService::Stub::PrepareAsyncCreateFileRaw(::grpc::ClientContext* context, const ::simplidfs::CreateFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::simplidfs::SimpleResponse, ::simplidfs::CreateFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::simplidfs::SimpleResponse>* FileService::Stub::AsyncCreateFileRaw(::grpc::ClientContext* context, const ::simplidfs::CreateFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileService::Stub::WriteFile(::grpc::ClientContext* context, const ::simplidfs::WriteFileRequest& request, ::simplidfs::SimpleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::simplidfs::WriteFileRequest, ::simplidfs::SimpleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WriteFile_, context, request, response);
}

void FileService::Stub::async::WriteFile(::grpc::ClientContext* context, const ::simplidfs::WriteFileRequest* request, ::simplidfs::SimpleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::simplidfs::WriteFileRequest, ::simplidfs::SimpleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteFile_, context, request, response, std::move(f));
}

void FileService::Stub::async::WriteFile(::grpc::ClientContext* context, const ::simplidfs::WriteFileRequest* request, ::simplidfs::SimpleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::simplidfs::SimpleResponse>* FileService::Stub::PrepareAsyncWriteFileRaw(::grpc::ClientContext* context, const ::simplidfs::WriteFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::simplidfs::SimpleResponse, ::simplidfs::WriteFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WriteFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::simplidfs::SimpleResponse>* FileService::Stub::AsyncWriteFileRaw(::grpc::ClientContext* context, const ::simplidfs::WriteFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileService::Stub::ReadFile(::grpc::ClientContext* context, const ::simplidfs::ReadFileRequest& request, ::simplidfs::ReadFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::simplidfs::ReadFileRequest, ::simplidfs::ReadFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadFile_, context, request, response);
}

void FileService::Stub::async::ReadFile(::grpc::ClientContext* context, const ::simplidfs::ReadFileRequest* request, ::simplidfs::ReadFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::simplidfs::ReadFileRequest, ::simplidfs::ReadFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadFile_, context, request, response, std::move(f));
}

void FileService::Stub::async::ReadFile(::grpc::ClientContext* context, const ::simplidfs::ReadFileRequest* request, ::simplidfs::ReadFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::simplidfs::ReadFileResponse>* FileService::Stub::PrepareAsyncReadFileRaw(::grpc::ClientContext* context, const ::simplidfs::ReadFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::simplidfs::ReadFileResponse, ::simplidfs::ReadFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::simplidfs::ReadFileResponse>* FileService::Stub::AsyncReadFileRaw(::grpc::ClientContext* context, const ::simplidfs::ReadFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileService::Stub::DeleteFile(::grpc::ClientContext* context, const ::simplidfs::DeleteFileRequest& request, ::simplidfs::SimpleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::simplidfs::DeleteFileRequest, ::simplidfs::SimpleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteFile_, context, request, response);
}

void FileService::Stub::async::DeleteFile(::grpc::ClientContext* context, const ::simplidfs::DeleteFileRequest* request, ::simplidfs::SimpleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::simplidfs::DeleteFileRequest, ::simplidfs::SimpleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteFile_, context, request, response, std::move(f));
}

void FileService::Stub::async::DeleteFile(::grpc::ClientContext* context, const ::simplidfs::DeleteFileRequest* request, ::simplidfs::SimpleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::simplidfs::SimpleResponse>* FileService::Stub::PrepareAsyncDeleteFileRaw(::grpc::ClientContext* context, const ::simplidfs::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::simplidfs::SimpleResponse, ::simplidfs::DeleteFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::simplidfs::SimpleResponse>* FileService::Stub::AsyncDeleteFileRaw(::grpc::ClientContext* context, const ::simplidfs::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

FileService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileService::Service, ::simplidfs::CreateFileRequest, ::simplidfs::SimpleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::simplidfs::CreateFileRequest* req,
             ::simplidfs::SimpleResponse* resp) {
               return service->CreateFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileService::Service, ::simplidfs::WriteFileRequest, ::simplidfs::SimpleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::simplidfs::WriteFileRequest* req,
             ::simplidfs::SimpleResponse* resp) {
               return service->WriteFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileService::Service, ::simplidfs::ReadFileRequest, ::simplidfs::ReadFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::simplidfs::ReadFileRequest* req,
             ::simplidfs::ReadFileResponse* resp) {
               return service->ReadFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileService::Service, ::simplidfs::DeleteFileRequest, ::simplidfs::SimpleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::simplidfs::DeleteFileRequest* req,
             ::simplidfs::SimpleResponse* resp) {
               return service->DeleteFile(ctx, req, resp);
             }, this)));
}

FileService::Service::~Service() {
}

::grpc::Status FileService::Service::CreateFile(::grpc::ServerContext* context, const ::simplidfs::CreateFileRequest* request, ::simplidfs::SimpleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileService::Service::WriteFile(::grpc::ServerContext* context, const ::simplidfs::WriteFileRequest* request, ::simplidfs::SimpleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileService::Service::ReadFile(::grpc::ServerContext* context, const ::simplidfs::ReadFileRequest* request, ::simplidfs::ReadFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileService::Service::DeleteFile(::grpc::ServerContext* context, const ::simplidfs::DeleteFileRequest* request, ::simplidfs::SimpleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace simplidfs

