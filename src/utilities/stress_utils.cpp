#include "utilities/stress_utils.hpp"
#include <bitset>
#include <random>

//------------------------------------------------------------------------------
// Implementation of utilities used by the FUSE stress tests.  These helpers
// generate deterministic pseudo-random data and count bit level differences
// between two buffers.  Keeping the implementation simple ensures the tests run
// consistently across platforms without requiring additional dependencies.
//------------------------------------------------------------------------------

std::vector<unsigned char> generate_pseudo_random_data(std::size_t size,
                                                       unsigned int seed) {
    // Mersenne Twister engine seeded so generated bytes are reproducible.
    std::mt19937 rng(seed);
    std::uniform_int_distribution<int> dist(0, 255);

    // Pre-size the output buffer so that push_back is not needed in the loop.
    std::vector<unsigned char> buffer(size);

    // Fill the buffer byte-by-byte with uniformly distributed values.
    for (std::size_t i = 0; i < size; ++i) {
        buffer[i] = static_cast<unsigned char>(dist(rng));
    }

    return buffer;
}

std::size_t count_bit_errors(const std::vector<unsigned char>& expected,
                             const std::vector<unsigned char>& actual) {
    // Track the total number of differing bits seen.
    std::size_t errors = 0;

    // Compare up to the length of the smaller buffer to avoid out-of-range
    // access.  Any extra bytes in either buffer are treated as full-byte errors
    // after the loop.
    std::size_t min_size = std::min(expected.size(), actual.size());

    for (std::size_t i = 0; i < min_size; ++i) {
        // XOR the bytes to see which bit positions differ and count the number
        // of set bits.
        unsigned char diff = expected[i] ^ actual[i];
        errors += std::bitset<8>(diff).count();
    }

    // Account for any trailing bytes present in one buffer but not the other.
    if (expected.size() > actual.size()) {
        errors += (expected.size() - actual.size()) * 8;
    } else if (actual.size() > expected.size()) {
        errors += (actual.size() - expected.size()) * 8;
    }

    return errors;
}
